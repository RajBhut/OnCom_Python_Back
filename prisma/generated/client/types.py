# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _LanguageListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.Language']]


class _LanguageListFilterHasInput(TypedDict):
    has: 'enums.Language'


class _LanguageListFilterHasEveryInput(TypedDict):
    has_every: List['enums.Language']


class _LanguageListFilterHasSomeInput(TypedDict):
    has_some: List['enums.Language']


class _LanguageListFilterIsEmptyInput(TypedDict):
    is_empty: bool


LanguageListFilter = Union[
    _LanguageListFilterHasInput,
    _LanguageListFilterEqualsInput,
    _LanguageListFilterHasSomeInput,
    _LanguageListFilterIsEmptyInput,
    _LanguageListFilterHasEveryInput,
]


class _LanguageListUpdateSet(TypedDict):
    set: List['enums.Language']


class _LanguageListUpdatePush(TypedDict):
    push: List['enums.Language']


LanguageListUpdate = Union[
    List['enums.Language'],
    _LanguageListUpdateSet,
    _LanguageListUpdatePush,
]

class _DifficultyListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.Difficulty']]


class _DifficultyListFilterHasInput(TypedDict):
    has: 'enums.Difficulty'


class _DifficultyListFilterHasEveryInput(TypedDict):
    has_every: List['enums.Difficulty']


class _DifficultyListFilterHasSomeInput(TypedDict):
    has_some: List['enums.Difficulty']


class _DifficultyListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DifficultyListFilter = Union[
    _DifficultyListFilterHasInput,
    _DifficultyListFilterEqualsInput,
    _DifficultyListFilterHasSomeInput,
    _DifficultyListFilterIsEmptyInput,
    _DifficultyListFilterHasEveryInput,
]


class _DifficultyListUpdateSet(TypedDict):
    set: List['enums.Difficulty']


class _DifficultyListUpdatePush(TypedDict):
    push: List['enums.Difficulty']


DifficultyListUpdate = Union[
    List['enums.Difficulty'],
    _DifficultyListUpdateSet,
    _DifficultyListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _int
    name: Optional[_str]
    createdAt: datetime.datetime
    problems: 'ProblemCreateManyNestedWithoutRelationsInput'
    contests: 'ContestCreateManyNestedWithoutRelationsInput'
    Submission: 'SubmissionCreateManyNestedWithoutRelationsInput'
    ContestParticipant: 'ContestParticipantCreateManyNestedWithoutRelationsInput'
    Problem_code: 'Problem_codeCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _int
    name: Optional[_str]
    createdAt: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    password: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    email: _str
    password: _str
    name: Optional[_str]
    createdAt: datetime.datetime
    problems: 'ProblemUpdateManyWithoutRelationsInput'
    contests: 'ContestUpdateManyWithoutRelationsInput'
    Submission: 'SubmissionUpdateManyWithoutRelationsInput'
    ContestParticipant: 'ContestParticipantUpdateManyWithoutRelationsInput'
    Problem_code: 'Problem_codeUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    email: _str
    password: _str
    name: Optional[_str]
    createdAt: datetime.datetime


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
    '_User_name_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    problems: Union[bool, 'FindManyProblemArgsFromUser']
    contests: Union[bool, 'FindManyContestArgsFromUser']
    Submission: Union[bool, 'FindManySubmissionArgsFromUser']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromUser']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    problems: Union[bool, 'FindManyProblemArgsFromUserRecursive1']
    contests: Union[bool, 'FindManyContestArgsFromUserRecursive1']
    Submission: Union[bool, 'FindManySubmissionArgsFromUserRecursive1']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromUserRecursive1']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    problems: Union[bool, 'FindManyProblemArgsFromUserRecursive2']
    contests: Union[bool, 'FindManyContestArgsFromUserRecursive2']
    Submission: Union[bool, 'FindManySubmissionArgsFromUserRecursive2']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromUserRecursive2']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    problems: Union[bool, 'FindManyProblemArgsFromUserRecursive3']
    contests: Union[bool, 'FindManyContestArgsFromUserRecursive3']
    Submission: Union[bool, 'FindManySubmissionArgsFromUserRecursive3']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromUserRecursive3']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    problems: Union[bool, 'FindManyProblemArgsFromUserRecursive4']
    contests: Union[bool, 'FindManyContestArgsFromUserRecursive4']
    Submission: Union[bool, 'FindManySubmissionArgsFromUserRecursive4']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromUserRecursive4']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProblemIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    creator: Union[bool, 'UserArgsFromUserRecursive1']
    submissions: Union[bool, 'FindManySubmissionArgsFromUserRecursive1']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromUserRecursive1']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromUserRecursive1']


class ProblemIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    creator: Union[bool, 'UserArgsFromUserRecursive2']
    submissions: Union[bool, 'FindManySubmissionArgsFromUserRecursive2']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromUserRecursive2']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromUserRecursive2']


class ProblemIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    creator: Union[bool, 'UserArgsFromUserRecursive3']
    submissions: Union[bool, 'FindManySubmissionArgsFromUserRecursive3']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromUserRecursive3']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromUserRecursive3']


class ProblemIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    creator: Union[bool, 'UserArgsFromUserRecursive4']
    submissions: Union[bool, 'FindManySubmissionArgsFromUserRecursive4']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromUserRecursive4']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromUserRecursive4']


class ProblemIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ProblemArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProblemIncludeFromProblemRecursive1'


class ProblemArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProblemIncludeFromProblemRecursive2'


class ProblemArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProblemIncludeFromProblemRecursive3'


class ProblemArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProblemIncludeFromProblemRecursive4'


class ProblemArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyProblemArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive1'


class FindManyProblemArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive2'


class FindManyProblemArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive3'


class FindManyProblemArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive4'


class FindManyProblemArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    
    

class Problem_codeIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    problem: Union[bool, 'ProblemArgsFromUserRecursive1']
    user: Union[bool, 'UserArgsFromUserRecursive1']


class Problem_codeIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    problem: Union[bool, 'ProblemArgsFromUserRecursive2']
    user: Union[bool, 'UserArgsFromUserRecursive2']


class Problem_codeIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    problem: Union[bool, 'ProblemArgsFromUserRecursive3']
    user: Union[bool, 'UserArgsFromUserRecursive3']


class Problem_codeIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    problem: Union[bool, 'ProblemArgsFromUserRecursive4']
    user: Union[bool, 'UserArgsFromUserRecursive4']


class Problem_codeIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class Problem_codeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive1'


class Problem_codeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive2'


class Problem_codeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive3'


class Problem_codeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive4'


class Problem_codeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyProblem_codeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive1'


class FindManyProblem_codeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive2'


class FindManyProblem_codeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive3'


class FindManyProblem_codeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive4'


class FindManyProblem_codeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    
    

class SubmissionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    problem: Union[bool, 'ProblemArgsFromUserRecursive1']


class SubmissionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    problem: Union[bool, 'ProblemArgsFromUserRecursive2']


class SubmissionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    problem: Union[bool, 'ProblemArgsFromUserRecursive3']


class SubmissionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    problem: Union[bool, 'ProblemArgsFromUserRecursive4']


class SubmissionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SubmissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class SubmissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class SubmissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class SubmissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class SubmissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySubmissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class FindManySubmissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class FindManySubmissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class FindManySubmissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class FindManySubmissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    
    

class ContestIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    creator: Union[bool, 'UserArgsFromUserRecursive1']
    problems: Union[bool, 'FindManyContestProblemArgsFromUserRecursive1']
    participants: Union[bool, 'FindManyContestParticipantArgsFromUserRecursive1']


class ContestIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    creator: Union[bool, 'UserArgsFromUserRecursive2']
    problems: Union[bool, 'FindManyContestProblemArgsFromUserRecursive2']
    participants: Union[bool, 'FindManyContestParticipantArgsFromUserRecursive2']


class ContestIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    creator: Union[bool, 'UserArgsFromUserRecursive3']
    problems: Union[bool, 'FindManyContestProblemArgsFromUserRecursive3']
    participants: Union[bool, 'FindManyContestParticipantArgsFromUserRecursive3']


class ContestIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    creator: Union[bool, 'UserArgsFromUserRecursive4']
    problems: Union[bool, 'FindManyContestProblemArgsFromUserRecursive4']
    participants: Union[bool, 'FindManyContestParticipantArgsFromUserRecursive4']


class ContestIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ContestArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ContestIncludeFromContestRecursive1'


class ContestArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ContestIncludeFromContestRecursive2'


class ContestArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ContestIncludeFromContestRecursive3'


class ContestArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ContestIncludeFromContestRecursive4'


class ContestArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyContestArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive1'


class FindManyContestArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive2'


class FindManyContestArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive3'


class FindManyContestArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive4'


class FindManyContestArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    
    

class ContestProblemIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    contest: Union[bool, 'ContestArgsFromUserRecursive1']
    problem: Union[bool, 'ProblemArgsFromUserRecursive1']


class ContestProblemIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    contest: Union[bool, 'ContestArgsFromUserRecursive2']
    problem: Union[bool, 'ProblemArgsFromUserRecursive2']


class ContestProblemIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    contest: Union[bool, 'ContestArgsFromUserRecursive3']
    problem: Union[bool, 'ProblemArgsFromUserRecursive3']


class ContestProblemIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    contest: Union[bool, 'ContestArgsFromUserRecursive4']
    problem: Union[bool, 'ProblemArgsFromUserRecursive4']


class ContestProblemIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ContestProblemArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ContestProblemIncludeFromContestProblemRecursive1'


class ContestProblemArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ContestProblemIncludeFromContestProblemRecursive2'


class ContestProblemArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ContestProblemIncludeFromContestProblemRecursive3'


class ContestProblemArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ContestProblemIncludeFromContestProblemRecursive4'


class ContestProblemArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyContestProblemArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive1'


class FindManyContestProblemArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive2'


class FindManyContestProblemArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive3'


class FindManyContestProblemArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive4'


class FindManyContestProblemArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    
    

class ContestParticipantIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    contest: Union[bool, 'ContestArgsFromUserRecursive1']
    user: Union[bool, 'UserArgsFromUserRecursive1']


class ContestParticipantIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    contest: Union[bool, 'ContestArgsFromUserRecursive2']
    user: Union[bool, 'UserArgsFromUserRecursive2']


class ContestParticipantIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    contest: Union[bool, 'ContestArgsFromUserRecursive3']
    user: Union[bool, 'UserArgsFromUserRecursive3']


class ContestParticipantIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    contest: Union[bool, 'ContestArgsFromUserRecursive4']
    user: Union[bool, 'UserArgsFromUserRecursive4']


class ContestParticipantIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ContestParticipantArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive1'


class ContestParticipantArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive2'


class ContestParticipantArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive3'


class ContestParticipantArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive4'


class ContestParticipantArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyContestParticipantArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive1'


class FindManyContestParticipantArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive2'


class FindManyContestParticipantArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive3'


class FindManyContestParticipantArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive4'


class FindManyContestParticipantArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    problems: 'ProblemListRelationFilter'
    contests: 'ContestListRelationFilter'
    Submission: 'SubmissionListRelationFilter'
    ContestParticipant: 'ContestParticipantListRelationFilter'
    Problem_code: 'Problem_codeListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    problems: 'ProblemListRelationFilter'
    contests: 'ContestListRelationFilter'
    Submission: 'SubmissionListRelationFilter'
    ContestParticipant: 'ContestParticipantListRelationFilter'
    Problem_code: 'Problem_codeListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    problems: 'ProblemListRelationFilter'
    contests: 'ContestListRelationFilter'
    Submission: 'SubmissionListRelationFilter'
    ContestParticipant: 'ContestParticipantListRelationFilter'
    Problem_code: 'Problem_codeListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    problems: 'ProblemListRelationFilter'
    contests: 'ContestListRelationFilter'
    Submission: 'SubmissionListRelationFilter'
    ContestParticipant: 'ContestParticipantListRelationFilter'
    Problem_code: 'Problem_codeListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    problems: 'ProblemListRelationFilter'
    contests: 'ContestListRelationFilter'
    Submission: 'SubmissionListRelationFilter'
    ContestParticipant: 'ContestParticipantListRelationFilter'
    Problem_code: 'Problem_codeListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _int
    email: _str
    password: _str
    name: _str
    createdAt: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    id: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    id: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _int
    email: _str
    password: _str
    name: _str
    createdAt: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    password: bool
    name: bool
    createdAt: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    password: bool
    name: bool
    createdAt: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    id: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'password': bool,
        'name': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'password': int,
        'name': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'password',
    'name',
    'createdAt',
    'problems',
    'contests',
    'Submission',
    'ContestParticipant',
    'Problem_code',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'password',
    'name',
    'createdAt',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'problems',
        'contests',
        'Submission',
        'ContestParticipant',
        'Problem_code',
    ]

# Problem types

class ProblemOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Problem create method"""
    id: _int
    creator: 'UserCreateNestedWithoutRelationsInput'
    creatorId: _int
    submissions: 'SubmissionCreateManyNestedWithoutRelationsInput'
    tags: List[_str]
    ContestProblem: 'ContestProblemCreateManyNestedWithoutRelationsInput'
    edgedata: _str
    nodedata: _str
    Problem_code: 'Problem_codeCreateManyNestedWithoutRelationsInput'


class ProblemCreateInput(ProblemOptionalCreateInput):
    """Required arguments to the Problem create method"""
    title: _str
    description: _str
    difficulty: 'enums.Difficulty'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProblemOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Problem create method, without relations"""
    id: _int
    creatorId: _int
    tags: List[_str]
    edgedata: _str
    nodedata: _str


class ProblemCreateWithoutRelationsInput(ProblemOptionalCreateWithoutRelationsInput):
    """Required arguments to the Problem create method, without relations"""
    title: _str
    description: _str
    difficulty: 'enums.Difficulty'

class ProblemConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ProblemCreateWithoutRelationsInput'
    where: 'ProblemWhereUniqueInput'

class ProblemCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProblemCreateWithoutRelationsInput'
    connect: 'ProblemWhereUniqueInput'
    connect_or_create: 'ProblemConnectOrCreateWithoutRelationsInput'


class ProblemCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProblemCreateWithoutRelationsInput', List['ProblemCreateWithoutRelationsInput']]
    connect: Union['ProblemWhereUniqueInput', List['ProblemWhereUniqueInput']]
    connect_or_create: Union['ProblemConnectOrCreateWithoutRelationsInput', List['ProblemConnectOrCreateWithoutRelationsInput']]

_ProblemWhereUnique_id_Input = TypedDict(
    '_ProblemWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ProblemWhereUniqueInput = _ProblemWhereUnique_id_Input


class ProblemUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    title: _str
    description: _str
    difficulty: 'enums.Difficulty'
    creator: 'UserUpdateOneWithoutRelationsInput'
    submissions: 'SubmissionUpdateManyWithoutRelationsInput'
    tags: 'types.StringListUpdate'
    ContestProblem: 'ContestProblemUpdateManyWithoutRelationsInput'
    edgedata: _str
    nodedata: _str
    Problem_code: 'Problem_codeUpdateManyWithoutRelationsInput'


class ProblemUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    title: _str
    description: _str
    difficulty: 'enums.Difficulty'
    tags: 'types.StringListUpdate'
    edgedata: _str
    nodedata: _str


class ProblemUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProblemCreateWithoutRelationsInput']
    connect: List['ProblemWhereUniqueInput']
    connect_or_create: List['ProblemConnectOrCreateWithoutRelationsInput']
    set: List['ProblemWhereUniqueInput']
    disconnect: List['ProblemWhereUniqueInput']
    delete: List['ProblemWhereUniqueInput']

    # TODO
    # update: List['ProblemUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProblemUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProblemScalarWhereInput']
    # upsert: List['ProblemUpserteWithWhereUniqueWithoutRelationsInput']


class ProblemUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProblemCreateWithoutRelationsInput'
    connect: 'ProblemWhereUniqueInput'
    connect_or_create: 'ProblemConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProblemUpdateInput'
    # upsert: 'ProblemUpsertWithoutRelationsInput'


class ProblemUpsertInput(TypedDict):
    create: 'ProblemCreateInput'
    update: 'ProblemUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Problem_id_OrderByInput = TypedDict(
    '_Problem_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Problem_title_OrderByInput = TypedDict(
    '_Problem_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Problem_description_OrderByInput = TypedDict(
    '_Problem_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Problem_difficulty_OrderByInput = TypedDict(
    '_Problem_difficulty_OrderByInput',
    {
        'difficulty': 'SortOrder',
    },
    total=True
)

_Problem_creatorId_OrderByInput = TypedDict(
    '_Problem_creatorId_OrderByInput',
    {
        'creatorId': 'SortOrder',
    },
    total=True
)

_Problem_tags_OrderByInput = TypedDict(
    '_Problem_tags_OrderByInput',
    {
        'tags': 'SortOrder',
    },
    total=True
)

_Problem_edgedata_OrderByInput = TypedDict(
    '_Problem_edgedata_OrderByInput',
    {
        'edgedata': 'SortOrder',
    },
    total=True
)

_Problem_nodedata_OrderByInput = TypedDict(
    '_Problem_nodedata_OrderByInput',
    {
        'nodedata': 'SortOrder',
    },
    total=True
)

_Problem_RelevanceInner = TypedDict(
    '_Problem_RelevanceInner',
    {
        'fields': 'List[ProblemScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Problem_RelevanceOrderByInput = TypedDict(
    '_Problem_RelevanceOrderByInput',
    {
        '_relevance': '_Problem_RelevanceInner',
    },
    total=True
)

ProblemOrderByInput = Union[
    '_Problem_id_OrderByInput',
    '_Problem_title_OrderByInput',
    '_Problem_description_OrderByInput',
    '_Problem_difficulty_OrderByInput',
    '_Problem_creatorId_OrderByInput',
    '_Problem_tags_OrderByInput',
    '_Problem_edgedata_OrderByInput',
    '_Problem_nodedata_OrderByInput',
    '_Problem_RelevanceOrderByInput',
]



# recursive Problem types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProblemRelationFilter = TypedDict(
    'ProblemRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProblemListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProblemInclude(TypedDict, total=False):
    """Problem relational arguments"""
    creator: Union[bool, 'UserArgsFromProblem']
    submissions: Union[bool, 'FindManySubmissionArgsFromProblem']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromProblem']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblem']


    

class UserIncludeFromProblem(TypedDict, total=False):
    """Relational arguments for Problem"""
    problems: Union[bool, 'FindManyProblemArgsFromProblemRecursive1']
    contests: Union[bool, 'FindManyContestArgsFromProblemRecursive1']
    Submission: Union[bool, 'FindManySubmissionArgsFromProblemRecursive1']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromProblemRecursive1']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblemRecursive1']


class UserIncludeFromProblemRecursive1(TypedDict, total=False):
    """Relational arguments for Problem"""
    problems: Union[bool, 'FindManyProblemArgsFromProblemRecursive2']
    contests: Union[bool, 'FindManyContestArgsFromProblemRecursive2']
    Submission: Union[bool, 'FindManySubmissionArgsFromProblemRecursive2']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromProblemRecursive2']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblemRecursive2']


class UserIncludeFromProblemRecursive2(TypedDict, total=False):
    """Relational arguments for Problem"""
    problems: Union[bool, 'FindManyProblemArgsFromProblemRecursive3']
    contests: Union[bool, 'FindManyContestArgsFromProblemRecursive3']
    Submission: Union[bool, 'FindManySubmissionArgsFromProblemRecursive3']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromProblemRecursive3']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblemRecursive3']


class UserIncludeFromProblemRecursive3(TypedDict, total=False):
    """Relational arguments for Problem"""
    problems: Union[bool, 'FindManyProblemArgsFromProblemRecursive4']
    contests: Union[bool, 'FindManyContestArgsFromProblemRecursive4']
    Submission: Union[bool, 'FindManySubmissionArgsFromProblemRecursive4']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromProblemRecursive4']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblemRecursive4']


class UserIncludeFromProblemRecursive4(TypedDict, total=False):
    """Relational arguments for Problem"""

    

class UserArgsFromProblem(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromProblemRecursive1(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromProblemRecursive2(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromProblemRecursive3(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromProblemRecursive4(TypedDict, total=False):
    """Arguments for Problem"""
    
    

class FindManyUserArgsFromProblem(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromProblemRecursive1(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromProblemRecursive2(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromProblemRecursive3(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromProblemRecursive4(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProblemIncludeFromProblem(TypedDict, total=False):
    """Relational arguments for Problem"""
    creator: Union[bool, 'UserArgsFromProblemRecursive1']
    submissions: Union[bool, 'FindManySubmissionArgsFromProblemRecursive1']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromProblemRecursive1']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblemRecursive1']


class ProblemIncludeFromProblemRecursive1(TypedDict, total=False):
    """Relational arguments for Problem"""
    creator: Union[bool, 'UserArgsFromProblemRecursive2']
    submissions: Union[bool, 'FindManySubmissionArgsFromProblemRecursive2']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromProblemRecursive2']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblemRecursive2']


class ProblemIncludeFromProblemRecursive2(TypedDict, total=False):
    """Relational arguments for Problem"""
    creator: Union[bool, 'UserArgsFromProblemRecursive3']
    submissions: Union[bool, 'FindManySubmissionArgsFromProblemRecursive3']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromProblemRecursive3']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblemRecursive3']


class ProblemIncludeFromProblemRecursive3(TypedDict, total=False):
    """Relational arguments for Problem"""
    creator: Union[bool, 'UserArgsFromProblemRecursive4']
    submissions: Union[bool, 'FindManySubmissionArgsFromProblemRecursive4']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromProblemRecursive4']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblemRecursive4']


class ProblemIncludeFromProblemRecursive4(TypedDict, total=False):
    """Relational arguments for Problem"""

    

class ProblemArgsFromProblem(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ProblemIncludeFromProblemRecursive1'


class ProblemArgsFromProblemRecursive1(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ProblemIncludeFromProblemRecursive2'


class ProblemArgsFromProblemRecursive2(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ProblemIncludeFromProblemRecursive3'


class ProblemArgsFromProblemRecursive3(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ProblemIncludeFromProblemRecursive4'


class ProblemArgsFromProblemRecursive4(TypedDict, total=False):
    """Arguments for Problem"""
    
    

class FindManyProblemArgsFromProblem(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive1'


class FindManyProblemArgsFromProblemRecursive1(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive2'


class FindManyProblemArgsFromProblemRecursive2(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive3'


class FindManyProblemArgsFromProblemRecursive3(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive4'


class FindManyProblemArgsFromProblemRecursive4(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    
    

class Problem_codeIncludeFromProblem(TypedDict, total=False):
    """Relational arguments for Problem"""
    problem: Union[bool, 'ProblemArgsFromProblemRecursive1']
    user: Union[bool, 'UserArgsFromProblemRecursive1']


class Problem_codeIncludeFromProblemRecursive1(TypedDict, total=False):
    """Relational arguments for Problem"""
    problem: Union[bool, 'ProblemArgsFromProblemRecursive2']
    user: Union[bool, 'UserArgsFromProblemRecursive2']


class Problem_codeIncludeFromProblemRecursive2(TypedDict, total=False):
    """Relational arguments for Problem"""
    problem: Union[bool, 'ProblemArgsFromProblemRecursive3']
    user: Union[bool, 'UserArgsFromProblemRecursive3']


class Problem_codeIncludeFromProblemRecursive3(TypedDict, total=False):
    """Relational arguments for Problem"""
    problem: Union[bool, 'ProblemArgsFromProblemRecursive4']
    user: Union[bool, 'UserArgsFromProblemRecursive4']


class Problem_codeIncludeFromProblemRecursive4(TypedDict, total=False):
    """Relational arguments for Problem"""

    

class Problem_codeArgsFromProblem(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive1'


class Problem_codeArgsFromProblemRecursive1(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive2'


class Problem_codeArgsFromProblemRecursive2(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive3'


class Problem_codeArgsFromProblemRecursive3(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive4'


class Problem_codeArgsFromProblemRecursive4(TypedDict, total=False):
    """Arguments for Problem"""
    
    

class FindManyProblem_codeArgsFromProblem(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive1'


class FindManyProblem_codeArgsFromProblemRecursive1(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive2'


class FindManyProblem_codeArgsFromProblemRecursive2(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive3'


class FindManyProblem_codeArgsFromProblemRecursive3(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive4'


class FindManyProblem_codeArgsFromProblemRecursive4(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    
    

class SubmissionIncludeFromProblem(TypedDict, total=False):
    """Relational arguments for Problem"""
    user: Union[bool, 'UserArgsFromProblemRecursive1']
    problem: Union[bool, 'ProblemArgsFromProblemRecursive1']


class SubmissionIncludeFromProblemRecursive1(TypedDict, total=False):
    """Relational arguments for Problem"""
    user: Union[bool, 'UserArgsFromProblemRecursive2']
    problem: Union[bool, 'ProblemArgsFromProblemRecursive2']


class SubmissionIncludeFromProblemRecursive2(TypedDict, total=False):
    """Relational arguments for Problem"""
    user: Union[bool, 'UserArgsFromProblemRecursive3']
    problem: Union[bool, 'ProblemArgsFromProblemRecursive3']


class SubmissionIncludeFromProblemRecursive3(TypedDict, total=False):
    """Relational arguments for Problem"""
    user: Union[bool, 'UserArgsFromProblemRecursive4']
    problem: Union[bool, 'ProblemArgsFromProblemRecursive4']


class SubmissionIncludeFromProblemRecursive4(TypedDict, total=False):
    """Relational arguments for Problem"""

    

class SubmissionArgsFromProblem(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class SubmissionArgsFromProblemRecursive1(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class SubmissionArgsFromProblemRecursive2(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class SubmissionArgsFromProblemRecursive3(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class SubmissionArgsFromProblemRecursive4(TypedDict, total=False):
    """Arguments for Problem"""
    
    

class FindManySubmissionArgsFromProblem(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class FindManySubmissionArgsFromProblemRecursive1(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class FindManySubmissionArgsFromProblemRecursive2(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class FindManySubmissionArgsFromProblemRecursive3(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class FindManySubmissionArgsFromProblemRecursive4(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    
    

class ContestIncludeFromProblem(TypedDict, total=False):
    """Relational arguments for Problem"""
    creator: Union[bool, 'UserArgsFromProblemRecursive1']
    problems: Union[bool, 'FindManyContestProblemArgsFromProblemRecursive1']
    participants: Union[bool, 'FindManyContestParticipantArgsFromProblemRecursive1']


class ContestIncludeFromProblemRecursive1(TypedDict, total=False):
    """Relational arguments for Problem"""
    creator: Union[bool, 'UserArgsFromProblemRecursive2']
    problems: Union[bool, 'FindManyContestProblemArgsFromProblemRecursive2']
    participants: Union[bool, 'FindManyContestParticipantArgsFromProblemRecursive2']


class ContestIncludeFromProblemRecursive2(TypedDict, total=False):
    """Relational arguments for Problem"""
    creator: Union[bool, 'UserArgsFromProblemRecursive3']
    problems: Union[bool, 'FindManyContestProblemArgsFromProblemRecursive3']
    participants: Union[bool, 'FindManyContestParticipantArgsFromProblemRecursive3']


class ContestIncludeFromProblemRecursive3(TypedDict, total=False):
    """Relational arguments for Problem"""
    creator: Union[bool, 'UserArgsFromProblemRecursive4']
    problems: Union[bool, 'FindManyContestProblemArgsFromProblemRecursive4']
    participants: Union[bool, 'FindManyContestParticipantArgsFromProblemRecursive4']


class ContestIncludeFromProblemRecursive4(TypedDict, total=False):
    """Relational arguments for Problem"""

    

class ContestArgsFromProblem(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ContestIncludeFromContestRecursive1'


class ContestArgsFromProblemRecursive1(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ContestIncludeFromContestRecursive2'


class ContestArgsFromProblemRecursive2(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ContestIncludeFromContestRecursive3'


class ContestArgsFromProblemRecursive3(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ContestIncludeFromContestRecursive4'


class ContestArgsFromProblemRecursive4(TypedDict, total=False):
    """Arguments for Problem"""
    
    

class FindManyContestArgsFromProblem(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive1'


class FindManyContestArgsFromProblemRecursive1(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive2'


class FindManyContestArgsFromProblemRecursive2(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive3'


class FindManyContestArgsFromProblemRecursive3(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive4'


class FindManyContestArgsFromProblemRecursive4(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    
    

class ContestProblemIncludeFromProblem(TypedDict, total=False):
    """Relational arguments for Problem"""
    contest: Union[bool, 'ContestArgsFromProblemRecursive1']
    problem: Union[bool, 'ProblemArgsFromProblemRecursive1']


class ContestProblemIncludeFromProblemRecursive1(TypedDict, total=False):
    """Relational arguments for Problem"""
    contest: Union[bool, 'ContestArgsFromProblemRecursive2']
    problem: Union[bool, 'ProblemArgsFromProblemRecursive2']


class ContestProblemIncludeFromProblemRecursive2(TypedDict, total=False):
    """Relational arguments for Problem"""
    contest: Union[bool, 'ContestArgsFromProblemRecursive3']
    problem: Union[bool, 'ProblemArgsFromProblemRecursive3']


class ContestProblemIncludeFromProblemRecursive3(TypedDict, total=False):
    """Relational arguments for Problem"""
    contest: Union[bool, 'ContestArgsFromProblemRecursive4']
    problem: Union[bool, 'ProblemArgsFromProblemRecursive4']


class ContestProblemIncludeFromProblemRecursive4(TypedDict, total=False):
    """Relational arguments for Problem"""

    

class ContestProblemArgsFromProblem(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ContestProblemIncludeFromContestProblemRecursive1'


class ContestProblemArgsFromProblemRecursive1(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ContestProblemIncludeFromContestProblemRecursive2'


class ContestProblemArgsFromProblemRecursive2(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ContestProblemIncludeFromContestProblemRecursive3'


class ContestProblemArgsFromProblemRecursive3(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ContestProblemIncludeFromContestProblemRecursive4'


class ContestProblemArgsFromProblemRecursive4(TypedDict, total=False):
    """Arguments for Problem"""
    
    

class FindManyContestProblemArgsFromProblem(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive1'


class FindManyContestProblemArgsFromProblemRecursive1(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive2'


class FindManyContestProblemArgsFromProblemRecursive2(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive3'


class FindManyContestProblemArgsFromProblemRecursive3(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive4'


class FindManyContestProblemArgsFromProblemRecursive4(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    
    

class ContestParticipantIncludeFromProblem(TypedDict, total=False):
    """Relational arguments for Problem"""
    contest: Union[bool, 'ContestArgsFromProblemRecursive1']
    user: Union[bool, 'UserArgsFromProblemRecursive1']


class ContestParticipantIncludeFromProblemRecursive1(TypedDict, total=False):
    """Relational arguments for Problem"""
    contest: Union[bool, 'ContestArgsFromProblemRecursive2']
    user: Union[bool, 'UserArgsFromProblemRecursive2']


class ContestParticipantIncludeFromProblemRecursive2(TypedDict, total=False):
    """Relational arguments for Problem"""
    contest: Union[bool, 'ContestArgsFromProblemRecursive3']
    user: Union[bool, 'UserArgsFromProblemRecursive3']


class ContestParticipantIncludeFromProblemRecursive3(TypedDict, total=False):
    """Relational arguments for Problem"""
    contest: Union[bool, 'ContestArgsFromProblemRecursive4']
    user: Union[bool, 'UserArgsFromProblemRecursive4']


class ContestParticipantIncludeFromProblemRecursive4(TypedDict, total=False):
    """Relational arguments for Problem"""

    

class ContestParticipantArgsFromProblem(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive1'


class ContestParticipantArgsFromProblemRecursive1(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive2'


class ContestParticipantArgsFromProblemRecursive2(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive3'


class ContestParticipantArgsFromProblemRecursive3(TypedDict, total=False):
    """Arguments for Problem"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive4'


class ContestParticipantArgsFromProblemRecursive4(TypedDict, total=False):
    """Arguments for Problem"""
    
    

class FindManyContestParticipantArgsFromProblem(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive1'


class FindManyContestParticipantArgsFromProblemRecursive1(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive2'


class FindManyContestParticipantArgsFromProblemRecursive2(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive3'


class FindManyContestParticipantArgsFromProblemRecursive3(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive4'


class FindManyContestParticipantArgsFromProblemRecursive4(TypedDict, total=False):
    """Arguments for Problem"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    


FindManyProblemArgs = FindManyProblemArgsFromProblem
FindFirstProblemArgs = FindManyProblemArgsFromProblem


    

class ProblemWhereInput(TypedDict, total=False):
    """Problem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    difficulty: 'enums.Difficulty'
    creator: 'UserRelationFilter'
    creatorId: Union[_int, 'types.IntFilter']
    submissions: 'SubmissionListRelationFilter'
    tags: 'types.StringListFilter'
    ContestProblem: 'ContestProblemListRelationFilter'
    edgedata: Union[_str, 'types.StringFilter']
    nodedata: Union[_str, 'types.StringFilter']
    Problem_code: 'Problem_codeListRelationFilter'

    # should be noted that AND and NOT should be Union['ProblemWhereInputRecursive1', List['ProblemWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProblemWhereInputRecursive1']
    OR: List['ProblemWhereInputRecursive1']
    NOT: List['ProblemWhereInputRecursive1']


class ProblemWhereInputRecursive1(TypedDict, total=False):
    """Problem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    difficulty: 'enums.Difficulty'
    creator: 'UserRelationFilter'
    creatorId: Union[_int, 'types.IntFilter']
    submissions: 'SubmissionListRelationFilter'
    tags: 'types.StringListFilter'
    ContestProblem: 'ContestProblemListRelationFilter'
    edgedata: Union[_str, 'types.StringFilter']
    nodedata: Union[_str, 'types.StringFilter']
    Problem_code: 'Problem_codeListRelationFilter'

    # should be noted that AND and NOT should be Union['ProblemWhereInputRecursive2', List['ProblemWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProblemWhereInputRecursive2']
    OR: List['ProblemWhereInputRecursive2']
    NOT: List['ProblemWhereInputRecursive2']


class ProblemWhereInputRecursive2(TypedDict, total=False):
    """Problem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    difficulty: 'enums.Difficulty'
    creator: 'UserRelationFilter'
    creatorId: Union[_int, 'types.IntFilter']
    submissions: 'SubmissionListRelationFilter'
    tags: 'types.StringListFilter'
    ContestProblem: 'ContestProblemListRelationFilter'
    edgedata: Union[_str, 'types.StringFilter']
    nodedata: Union[_str, 'types.StringFilter']
    Problem_code: 'Problem_codeListRelationFilter'

    # should be noted that AND and NOT should be Union['ProblemWhereInputRecursive3', List['ProblemWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProblemWhereInputRecursive3']
    OR: List['ProblemWhereInputRecursive3']
    NOT: List['ProblemWhereInputRecursive3']


class ProblemWhereInputRecursive3(TypedDict, total=False):
    """Problem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    difficulty: 'enums.Difficulty'
    creator: 'UserRelationFilter'
    creatorId: Union[_int, 'types.IntFilter']
    submissions: 'SubmissionListRelationFilter'
    tags: 'types.StringListFilter'
    ContestProblem: 'ContestProblemListRelationFilter'
    edgedata: Union[_str, 'types.StringFilter']
    nodedata: Union[_str, 'types.StringFilter']
    Problem_code: 'Problem_codeListRelationFilter'

    # should be noted that AND and NOT should be Union['ProblemWhereInputRecursive4', List['ProblemWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProblemWhereInputRecursive4']
    OR: List['ProblemWhereInputRecursive4']
    NOT: List['ProblemWhereInputRecursive4']


class ProblemWhereInputRecursive4(TypedDict, total=False):
    """Problem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    difficulty: 'enums.Difficulty'
    creator: 'UserRelationFilter'
    creatorId: Union[_int, 'types.IntFilter']
    submissions: 'SubmissionListRelationFilter'
    tags: 'types.StringListFilter'
    ContestProblem: 'ContestProblemListRelationFilter'
    edgedata: Union[_str, 'types.StringFilter']
    nodedata: Union[_str, 'types.StringFilter']
    Problem_code: 'Problem_codeListRelationFilter'



# aggregate Problem types


    

class ProblemScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Problem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    difficulty: 'enums.Difficulty'
    creatorId: Union[_int, 'types.IntWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    edgedata: Union[_str, 'types.StringWithAggregatesFilter']
    nodedata: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProblemScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProblemScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProblemScalarWhereWithAggregatesInputRecursive1']


class ProblemScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Problem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    difficulty: 'enums.Difficulty'
    creatorId: Union[_int, 'types.IntWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    edgedata: Union[_str, 'types.StringWithAggregatesFilter']
    nodedata: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProblemScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProblemScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProblemScalarWhereWithAggregatesInputRecursive2']


class ProblemScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Problem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    difficulty: 'enums.Difficulty'
    creatorId: Union[_int, 'types.IntWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    edgedata: Union[_str, 'types.StringWithAggregatesFilter']
    nodedata: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProblemScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProblemScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProblemScalarWhereWithAggregatesInputRecursive3']


class ProblemScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Problem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    difficulty: 'enums.Difficulty'
    creatorId: Union[_int, 'types.IntWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    edgedata: Union[_str, 'types.StringWithAggregatesFilter']
    nodedata: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProblemScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProblemScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProblemScalarWhereWithAggregatesInputRecursive4']


class ProblemScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Problem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    difficulty: 'enums.Difficulty'
    creatorId: Union[_int, 'types.IntWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    edgedata: Union[_str, 'types.StringWithAggregatesFilter']
    nodedata: Union[_str, 'types.StringWithAggregatesFilter']



class ProblemGroupByOutput(TypedDict, total=False):
    id: _int
    title: _str
    description: _str
    difficulty: 'enums.Difficulty'
    creatorId: _int
    tags: List[_str]
    edgedata: _str
    nodedata: _str
    _sum: 'ProblemSumAggregateOutput'
    _avg: 'ProblemAvgAggregateOutput'
    _min: 'ProblemMinAggregateOutput'
    _max: 'ProblemMaxAggregateOutput'
    _count: 'ProblemCountAggregateOutput'


class ProblemAvgAggregateOutput(TypedDict, total=False):
    """Problem output for aggregating averages"""
    id: float
    creatorId: float


class ProblemSumAggregateOutput(TypedDict, total=False):
    """Problem output for aggregating sums"""
    id: _int
    creatorId: _int


class ProblemScalarAggregateOutput(TypedDict, total=False):
    """Problem output including scalar fields"""
    id: _int
    title: _str
    description: _str
    difficulty: 'enums.Difficulty'
    creatorId: _int
    tags: List[_str]
    edgedata: _str
    nodedata: _str


ProblemMinAggregateOutput = ProblemScalarAggregateOutput
ProblemMaxAggregateOutput = ProblemScalarAggregateOutput


class ProblemMaxAggregateInput(TypedDict, total=False):
    """Problem input for aggregating by max"""
    id: bool
    title: bool
    description: bool
    difficulty: bool
    creatorId: bool
    tags: bool
    edgedata: bool
    nodedata: bool


class ProblemMinAggregateInput(TypedDict, total=False):
    """Problem input for aggregating by min"""
    id: bool
    title: bool
    description: bool
    difficulty: bool
    creatorId: bool
    tags: bool
    edgedata: bool
    nodedata: bool


class ProblemNumberAggregateInput(TypedDict, total=False):
    """Problem input for aggregating numbers"""
    id: bool
    creatorId: bool


ProblemAvgAggregateInput = ProblemNumberAggregateInput
ProblemSumAggregateInput = ProblemNumberAggregateInput


ProblemCountAggregateInput = TypedDict(
    'ProblemCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'description': bool,
        'difficulty': bool,
        'creatorId': bool,
        'tags': bool,
        'edgedata': bool,
        'nodedata': bool,
        '_all': bool,
    },
    total=False,
)

ProblemCountAggregateOutput = TypedDict(
    'ProblemCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'description': int,
        'difficulty': int,
        'creatorId': int,
        'tags': int,
        'edgedata': int,
        'nodedata': int,
        '_all': int,
    },
    total=False,
)


ProblemKeys = Literal[
    'id',
    'title',
    'description',
    'difficulty',
    'creator',
    'creatorId',
    'submissions',
    'tags',
    'ContestProblem',
    'edgedata',
    'nodedata',
    'Problem_code',
]
ProblemScalarFieldKeys = Literal[
    'id',
    'title',
    'description',
    'difficulty',
    'creatorId',
    'tags',
    'edgedata',
    'nodedata',
]
ProblemScalarFieldKeysT = TypeVar('ProblemScalarFieldKeysT', bound=ProblemScalarFieldKeys)

ProblemRelationalFieldKeys = Literal[
        'creator',
        'submissions',
        'ContestProblem',
        'Problem_code',
    ]

# Problem_code types

class Problem_codeOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Problem_code create method"""
    id: _int
    problem: 'ProblemCreateNestedWithoutRelationsInput'
    problemId: _int
    user: 'UserCreateNestedWithoutRelationsInput'
    userId: _int
    createdAt: datetime.datetime


class Problem_codeCreateInput(Problem_codeOptionalCreateInput):
    """Required arguments to the Problem_code create method"""
    function: _str
    language: 'enums.Language'
    testcases: _str
    checker: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class Problem_codeOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Problem_code create method, without relations"""
    id: _int
    problemId: _int
    userId: _int
    createdAt: datetime.datetime


class Problem_codeCreateWithoutRelationsInput(Problem_codeOptionalCreateWithoutRelationsInput):
    """Required arguments to the Problem_code create method, without relations"""
    function: _str
    language: 'enums.Language'
    testcases: _str
    checker: _str

class Problem_codeConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'Problem_codeCreateWithoutRelationsInput'
    where: 'Problem_codeWhereUniqueInput'

class Problem_codeCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'Problem_codeCreateWithoutRelationsInput'
    connect: 'Problem_codeWhereUniqueInput'
    connect_or_create: 'Problem_codeConnectOrCreateWithoutRelationsInput'


class Problem_codeCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['Problem_codeCreateWithoutRelationsInput', List['Problem_codeCreateWithoutRelationsInput']]
    connect: Union['Problem_codeWhereUniqueInput', List['Problem_codeWhereUniqueInput']]
    connect_or_create: Union['Problem_codeConnectOrCreateWithoutRelationsInput', List['Problem_codeConnectOrCreateWithoutRelationsInput']]

_Problem_codeWhereUnique_id_Input = TypedDict(
    '_Problem_codeWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_Problem_codeCompoundPrimaryKeyInner = TypedDict(
    '_Problem_codeCompoundPrimaryKeyInner',
    {
        'problemId': '_int',
        'language': 'enums.Language',
    },
    total=True
)

_Problem_codeCompoundPrimaryKey = TypedDict(
    '_Problem_codeCompoundPrimaryKey',
    {
        'problemId_language': '_Problem_codeCompoundPrimaryKeyInner',
    },
    total=True
)

Problem_codeWhereUniqueInput = Union[
    '_Problem_codeWhereUnique_id_Input',
    '_Problem_codeCompoundPrimaryKey',
]


class Problem_codeUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    function: _str
    language: 'enums.Language'
    testcases: _str
    checker: _str
    problem: 'ProblemUpdateOneWithoutRelationsInput'
    user: 'UserUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime


class Problem_codeUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    function: _str
    language: 'enums.Language'
    testcases: _str
    checker: _str
    createdAt: datetime.datetime


class Problem_codeUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['Problem_codeCreateWithoutRelationsInput']
    connect: List['Problem_codeWhereUniqueInput']
    connect_or_create: List['Problem_codeConnectOrCreateWithoutRelationsInput']
    set: List['Problem_codeWhereUniqueInput']
    disconnect: List['Problem_codeWhereUniqueInput']
    delete: List['Problem_codeWhereUniqueInput']

    # TODO
    # update: List['Problem_codeUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['Problem_codeUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['Problem_codeScalarWhereInput']
    # upsert: List['Problem_codeUpserteWithWhereUniqueWithoutRelationsInput']


class Problem_codeUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'Problem_codeCreateWithoutRelationsInput'
    connect: 'Problem_codeWhereUniqueInput'
    connect_or_create: 'Problem_codeConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'Problem_codeUpdateInput'
    # upsert: 'Problem_codeUpsertWithoutRelationsInput'


class Problem_codeUpsertInput(TypedDict):
    create: 'Problem_codeCreateInput'
    update: 'Problem_codeUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Problem_code_id_OrderByInput = TypedDict(
    '_Problem_code_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Problem_code_function_OrderByInput = TypedDict(
    '_Problem_code_function_OrderByInput',
    {
        'function': 'SortOrder',
    },
    total=True
)

_Problem_code_language_OrderByInput = TypedDict(
    '_Problem_code_language_OrderByInput',
    {
        'language': 'SortOrder',
    },
    total=True
)

_Problem_code_testcases_OrderByInput = TypedDict(
    '_Problem_code_testcases_OrderByInput',
    {
        'testcases': 'SortOrder',
    },
    total=True
)

_Problem_code_checker_OrderByInput = TypedDict(
    '_Problem_code_checker_OrderByInput',
    {
        'checker': 'SortOrder',
    },
    total=True
)

_Problem_code_problemId_OrderByInput = TypedDict(
    '_Problem_code_problemId_OrderByInput',
    {
        'problemId': 'SortOrder',
    },
    total=True
)

_Problem_code_userId_OrderByInput = TypedDict(
    '_Problem_code_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Problem_code_createdAt_OrderByInput = TypedDict(
    '_Problem_code_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Problem_code_RelevanceInner = TypedDict(
    '_Problem_code_RelevanceInner',
    {
        'fields': 'List[Problem_codeScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Problem_code_RelevanceOrderByInput = TypedDict(
    '_Problem_code_RelevanceOrderByInput',
    {
        '_relevance': '_Problem_code_RelevanceInner',
    },
    total=True
)

Problem_codeOrderByInput = Union[
    '_Problem_code_id_OrderByInput',
    '_Problem_code_function_OrderByInput',
    '_Problem_code_language_OrderByInput',
    '_Problem_code_testcases_OrderByInput',
    '_Problem_code_checker_OrderByInput',
    '_Problem_code_problemId_OrderByInput',
    '_Problem_code_userId_OrderByInput',
    '_Problem_code_createdAt_OrderByInput',
    '_Problem_code_RelevanceOrderByInput',
]



# recursive Problem_code types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

Problem_codeRelationFilter = TypedDict(
    'Problem_codeRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class Problem_codeListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class Problem_codeInclude(TypedDict, total=False):
    """Problem_code relational arguments"""
    problem: Union[bool, 'ProblemArgsFromProblem_code']
    user: Union[bool, 'UserArgsFromProblem_code']


    

class UserIncludeFromProblem_code(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    problems: Union[bool, 'FindManyProblemArgsFromProblem_codeRecursive1']
    contests: Union[bool, 'FindManyContestArgsFromProblem_codeRecursive1']
    Submission: Union[bool, 'FindManySubmissionArgsFromProblem_codeRecursive1']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromProblem_codeRecursive1']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblem_codeRecursive1']


class UserIncludeFromProblem_codeRecursive1(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    problems: Union[bool, 'FindManyProblemArgsFromProblem_codeRecursive2']
    contests: Union[bool, 'FindManyContestArgsFromProblem_codeRecursive2']
    Submission: Union[bool, 'FindManySubmissionArgsFromProblem_codeRecursive2']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromProblem_codeRecursive2']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblem_codeRecursive2']


class UserIncludeFromProblem_codeRecursive2(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    problems: Union[bool, 'FindManyProblemArgsFromProblem_codeRecursive3']
    contests: Union[bool, 'FindManyContestArgsFromProblem_codeRecursive3']
    Submission: Union[bool, 'FindManySubmissionArgsFromProblem_codeRecursive3']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromProblem_codeRecursive3']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblem_codeRecursive3']


class UserIncludeFromProblem_codeRecursive3(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    problems: Union[bool, 'FindManyProblemArgsFromProblem_codeRecursive4']
    contests: Union[bool, 'FindManyContestArgsFromProblem_codeRecursive4']
    Submission: Union[bool, 'FindManySubmissionArgsFromProblem_codeRecursive4']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromProblem_codeRecursive4']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblem_codeRecursive4']


class UserIncludeFromProblem_codeRecursive4(TypedDict, total=False):
    """Relational arguments for Problem_code"""

    

class UserArgsFromProblem_code(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromProblem_codeRecursive1(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromProblem_codeRecursive2(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromProblem_codeRecursive3(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromProblem_codeRecursive4(TypedDict, total=False):
    """Arguments for Problem_code"""
    
    

class FindManyUserArgsFromProblem_code(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromProblem_codeRecursive1(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromProblem_codeRecursive2(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromProblem_codeRecursive3(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromProblem_codeRecursive4(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProblemIncludeFromProblem_code(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    creator: Union[bool, 'UserArgsFromProblem_codeRecursive1']
    submissions: Union[bool, 'FindManySubmissionArgsFromProblem_codeRecursive1']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromProblem_codeRecursive1']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblem_codeRecursive1']


class ProblemIncludeFromProblem_codeRecursive1(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    creator: Union[bool, 'UserArgsFromProblem_codeRecursive2']
    submissions: Union[bool, 'FindManySubmissionArgsFromProblem_codeRecursive2']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromProblem_codeRecursive2']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblem_codeRecursive2']


class ProblemIncludeFromProblem_codeRecursive2(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    creator: Union[bool, 'UserArgsFromProblem_codeRecursive3']
    submissions: Union[bool, 'FindManySubmissionArgsFromProblem_codeRecursive3']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromProblem_codeRecursive3']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblem_codeRecursive3']


class ProblemIncludeFromProblem_codeRecursive3(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    creator: Union[bool, 'UserArgsFromProblem_codeRecursive4']
    submissions: Union[bool, 'FindManySubmissionArgsFromProblem_codeRecursive4']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromProblem_codeRecursive4']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromProblem_codeRecursive4']


class ProblemIncludeFromProblem_codeRecursive4(TypedDict, total=False):
    """Relational arguments for Problem_code"""

    

class ProblemArgsFromProblem_code(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ProblemIncludeFromProblemRecursive1'


class ProblemArgsFromProblem_codeRecursive1(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ProblemIncludeFromProblemRecursive2'


class ProblemArgsFromProblem_codeRecursive2(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ProblemIncludeFromProblemRecursive3'


class ProblemArgsFromProblem_codeRecursive3(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ProblemIncludeFromProblemRecursive4'


class ProblemArgsFromProblem_codeRecursive4(TypedDict, total=False):
    """Arguments for Problem_code"""
    
    

class FindManyProblemArgsFromProblem_code(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive1'


class FindManyProblemArgsFromProblem_codeRecursive1(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive2'


class FindManyProblemArgsFromProblem_codeRecursive2(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive3'


class FindManyProblemArgsFromProblem_codeRecursive3(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive4'


class FindManyProblemArgsFromProblem_codeRecursive4(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    
    

class Problem_codeIncludeFromProblem_code(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    problem: Union[bool, 'ProblemArgsFromProblem_codeRecursive1']
    user: Union[bool, 'UserArgsFromProblem_codeRecursive1']


class Problem_codeIncludeFromProblem_codeRecursive1(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    problem: Union[bool, 'ProblemArgsFromProblem_codeRecursive2']
    user: Union[bool, 'UserArgsFromProblem_codeRecursive2']


class Problem_codeIncludeFromProblem_codeRecursive2(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    problem: Union[bool, 'ProblemArgsFromProblem_codeRecursive3']
    user: Union[bool, 'UserArgsFromProblem_codeRecursive3']


class Problem_codeIncludeFromProblem_codeRecursive3(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    problem: Union[bool, 'ProblemArgsFromProblem_codeRecursive4']
    user: Union[bool, 'UserArgsFromProblem_codeRecursive4']


class Problem_codeIncludeFromProblem_codeRecursive4(TypedDict, total=False):
    """Relational arguments for Problem_code"""

    

class Problem_codeArgsFromProblem_code(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive1'


class Problem_codeArgsFromProblem_codeRecursive1(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive2'


class Problem_codeArgsFromProblem_codeRecursive2(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive3'


class Problem_codeArgsFromProblem_codeRecursive3(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive4'


class Problem_codeArgsFromProblem_codeRecursive4(TypedDict, total=False):
    """Arguments for Problem_code"""
    
    

class FindManyProblem_codeArgsFromProblem_code(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive1'


class FindManyProblem_codeArgsFromProblem_codeRecursive1(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive2'


class FindManyProblem_codeArgsFromProblem_codeRecursive2(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive3'


class FindManyProblem_codeArgsFromProblem_codeRecursive3(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive4'


class FindManyProblem_codeArgsFromProblem_codeRecursive4(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    
    

class SubmissionIncludeFromProblem_code(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    user: Union[bool, 'UserArgsFromProblem_codeRecursive1']
    problem: Union[bool, 'ProblemArgsFromProblem_codeRecursive1']


class SubmissionIncludeFromProblem_codeRecursive1(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    user: Union[bool, 'UserArgsFromProblem_codeRecursive2']
    problem: Union[bool, 'ProblemArgsFromProblem_codeRecursive2']


class SubmissionIncludeFromProblem_codeRecursive2(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    user: Union[bool, 'UserArgsFromProblem_codeRecursive3']
    problem: Union[bool, 'ProblemArgsFromProblem_codeRecursive3']


class SubmissionIncludeFromProblem_codeRecursive3(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    user: Union[bool, 'UserArgsFromProblem_codeRecursive4']
    problem: Union[bool, 'ProblemArgsFromProblem_codeRecursive4']


class SubmissionIncludeFromProblem_codeRecursive4(TypedDict, total=False):
    """Relational arguments for Problem_code"""

    

class SubmissionArgsFromProblem_code(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class SubmissionArgsFromProblem_codeRecursive1(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class SubmissionArgsFromProblem_codeRecursive2(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class SubmissionArgsFromProblem_codeRecursive3(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class SubmissionArgsFromProblem_codeRecursive4(TypedDict, total=False):
    """Arguments for Problem_code"""
    
    

class FindManySubmissionArgsFromProblem_code(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class FindManySubmissionArgsFromProblem_codeRecursive1(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class FindManySubmissionArgsFromProblem_codeRecursive2(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class FindManySubmissionArgsFromProblem_codeRecursive3(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class FindManySubmissionArgsFromProblem_codeRecursive4(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    
    

class ContestIncludeFromProblem_code(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    creator: Union[bool, 'UserArgsFromProblem_codeRecursive1']
    problems: Union[bool, 'FindManyContestProblemArgsFromProblem_codeRecursive1']
    participants: Union[bool, 'FindManyContestParticipantArgsFromProblem_codeRecursive1']


class ContestIncludeFromProblem_codeRecursive1(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    creator: Union[bool, 'UserArgsFromProblem_codeRecursive2']
    problems: Union[bool, 'FindManyContestProblemArgsFromProblem_codeRecursive2']
    participants: Union[bool, 'FindManyContestParticipantArgsFromProblem_codeRecursive2']


class ContestIncludeFromProblem_codeRecursive2(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    creator: Union[bool, 'UserArgsFromProblem_codeRecursive3']
    problems: Union[bool, 'FindManyContestProblemArgsFromProblem_codeRecursive3']
    participants: Union[bool, 'FindManyContestParticipantArgsFromProblem_codeRecursive3']


class ContestIncludeFromProblem_codeRecursive3(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    creator: Union[bool, 'UserArgsFromProblem_codeRecursive4']
    problems: Union[bool, 'FindManyContestProblemArgsFromProblem_codeRecursive4']
    participants: Union[bool, 'FindManyContestParticipantArgsFromProblem_codeRecursive4']


class ContestIncludeFromProblem_codeRecursive4(TypedDict, total=False):
    """Relational arguments for Problem_code"""

    

class ContestArgsFromProblem_code(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ContestIncludeFromContestRecursive1'


class ContestArgsFromProblem_codeRecursive1(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ContestIncludeFromContestRecursive2'


class ContestArgsFromProblem_codeRecursive2(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ContestIncludeFromContestRecursive3'


class ContestArgsFromProblem_codeRecursive3(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ContestIncludeFromContestRecursive4'


class ContestArgsFromProblem_codeRecursive4(TypedDict, total=False):
    """Arguments for Problem_code"""
    
    

class FindManyContestArgsFromProblem_code(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive1'


class FindManyContestArgsFromProblem_codeRecursive1(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive2'


class FindManyContestArgsFromProblem_codeRecursive2(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive3'


class FindManyContestArgsFromProblem_codeRecursive3(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive4'


class FindManyContestArgsFromProblem_codeRecursive4(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    
    

class ContestProblemIncludeFromProblem_code(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    contest: Union[bool, 'ContestArgsFromProblem_codeRecursive1']
    problem: Union[bool, 'ProblemArgsFromProblem_codeRecursive1']


class ContestProblemIncludeFromProblem_codeRecursive1(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    contest: Union[bool, 'ContestArgsFromProblem_codeRecursive2']
    problem: Union[bool, 'ProblemArgsFromProblem_codeRecursive2']


class ContestProblemIncludeFromProblem_codeRecursive2(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    contest: Union[bool, 'ContestArgsFromProblem_codeRecursive3']
    problem: Union[bool, 'ProblemArgsFromProblem_codeRecursive3']


class ContestProblemIncludeFromProblem_codeRecursive3(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    contest: Union[bool, 'ContestArgsFromProblem_codeRecursive4']
    problem: Union[bool, 'ProblemArgsFromProblem_codeRecursive4']


class ContestProblemIncludeFromProblem_codeRecursive4(TypedDict, total=False):
    """Relational arguments for Problem_code"""

    

class ContestProblemArgsFromProblem_code(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ContestProblemIncludeFromContestProblemRecursive1'


class ContestProblemArgsFromProblem_codeRecursive1(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ContestProblemIncludeFromContestProblemRecursive2'


class ContestProblemArgsFromProblem_codeRecursive2(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ContestProblemIncludeFromContestProblemRecursive3'


class ContestProblemArgsFromProblem_codeRecursive3(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ContestProblemIncludeFromContestProblemRecursive4'


class ContestProblemArgsFromProblem_codeRecursive4(TypedDict, total=False):
    """Arguments for Problem_code"""
    
    

class FindManyContestProblemArgsFromProblem_code(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive1'


class FindManyContestProblemArgsFromProblem_codeRecursive1(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive2'


class FindManyContestProblemArgsFromProblem_codeRecursive2(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive3'


class FindManyContestProblemArgsFromProblem_codeRecursive3(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive4'


class FindManyContestProblemArgsFromProblem_codeRecursive4(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    
    

class ContestParticipantIncludeFromProblem_code(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    contest: Union[bool, 'ContestArgsFromProblem_codeRecursive1']
    user: Union[bool, 'UserArgsFromProblem_codeRecursive1']


class ContestParticipantIncludeFromProblem_codeRecursive1(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    contest: Union[bool, 'ContestArgsFromProblem_codeRecursive2']
    user: Union[bool, 'UserArgsFromProblem_codeRecursive2']


class ContestParticipantIncludeFromProblem_codeRecursive2(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    contest: Union[bool, 'ContestArgsFromProblem_codeRecursive3']
    user: Union[bool, 'UserArgsFromProblem_codeRecursive3']


class ContestParticipantIncludeFromProblem_codeRecursive3(TypedDict, total=False):
    """Relational arguments for Problem_code"""
    contest: Union[bool, 'ContestArgsFromProblem_codeRecursive4']
    user: Union[bool, 'UserArgsFromProblem_codeRecursive4']


class ContestParticipantIncludeFromProblem_codeRecursive4(TypedDict, total=False):
    """Relational arguments for Problem_code"""

    

class ContestParticipantArgsFromProblem_code(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive1'


class ContestParticipantArgsFromProblem_codeRecursive1(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive2'


class ContestParticipantArgsFromProblem_codeRecursive2(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive3'


class ContestParticipantArgsFromProblem_codeRecursive3(TypedDict, total=False):
    """Arguments for Problem_code"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive4'


class ContestParticipantArgsFromProblem_codeRecursive4(TypedDict, total=False):
    """Arguments for Problem_code"""
    
    

class FindManyContestParticipantArgsFromProblem_code(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive1'


class FindManyContestParticipantArgsFromProblem_codeRecursive1(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive2'


class FindManyContestParticipantArgsFromProblem_codeRecursive2(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive3'


class FindManyContestParticipantArgsFromProblem_codeRecursive3(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive4'


class FindManyContestParticipantArgsFromProblem_codeRecursive4(TypedDict, total=False):
    """Arguments for Problem_code"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    


FindManyProblem_codeArgs = FindManyProblem_codeArgsFromProblem_code
FindFirstProblem_codeArgs = FindManyProblem_codeArgsFromProblem_code


    

class Problem_codeWhereInput(TypedDict, total=False):
    """Problem_code arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    function: Union[_str, 'types.StringFilter']
    language: 'enums.Language'
    testcases: Union[_str, 'types.StringFilter']
    checker: Union[_str, 'types.StringFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['Problem_codeWhereInputRecursive1', List['Problem_codeWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['Problem_codeWhereInputRecursive1']
    OR: List['Problem_codeWhereInputRecursive1']
    NOT: List['Problem_codeWhereInputRecursive1']


class Problem_codeWhereInputRecursive1(TypedDict, total=False):
    """Problem_code arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    function: Union[_str, 'types.StringFilter']
    language: 'enums.Language'
    testcases: Union[_str, 'types.StringFilter']
    checker: Union[_str, 'types.StringFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['Problem_codeWhereInputRecursive2', List['Problem_codeWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['Problem_codeWhereInputRecursive2']
    OR: List['Problem_codeWhereInputRecursive2']
    NOT: List['Problem_codeWhereInputRecursive2']


class Problem_codeWhereInputRecursive2(TypedDict, total=False):
    """Problem_code arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    function: Union[_str, 'types.StringFilter']
    language: 'enums.Language'
    testcases: Union[_str, 'types.StringFilter']
    checker: Union[_str, 'types.StringFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['Problem_codeWhereInputRecursive3', List['Problem_codeWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['Problem_codeWhereInputRecursive3']
    OR: List['Problem_codeWhereInputRecursive3']
    NOT: List['Problem_codeWhereInputRecursive3']


class Problem_codeWhereInputRecursive3(TypedDict, total=False):
    """Problem_code arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    function: Union[_str, 'types.StringFilter']
    language: 'enums.Language'
    testcases: Union[_str, 'types.StringFilter']
    checker: Union[_str, 'types.StringFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['Problem_codeWhereInputRecursive4', List['Problem_codeWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['Problem_codeWhereInputRecursive4']
    OR: List['Problem_codeWhereInputRecursive4']
    NOT: List['Problem_codeWhereInputRecursive4']


class Problem_codeWhereInputRecursive4(TypedDict, total=False):
    """Problem_code arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    function: Union[_str, 'types.StringFilter']
    language: 'enums.Language'
    testcases: Union[_str, 'types.StringFilter']
    checker: Union[_str, 'types.StringFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Problem_code types


    

class Problem_codeScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Problem_code arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    function: Union[_str, 'types.StringWithAggregatesFilter']
    language: 'enums.Language'
    testcases: Union[_str, 'types.StringWithAggregatesFilter']
    checker: Union[_str, 'types.StringWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Problem_codeScalarWhereWithAggregatesInputRecursive1']
    OR: List['Problem_codeScalarWhereWithAggregatesInputRecursive1']
    NOT: List['Problem_codeScalarWhereWithAggregatesInputRecursive1']


class Problem_codeScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Problem_code arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    function: Union[_str, 'types.StringWithAggregatesFilter']
    language: 'enums.Language'
    testcases: Union[_str, 'types.StringWithAggregatesFilter']
    checker: Union[_str, 'types.StringWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Problem_codeScalarWhereWithAggregatesInputRecursive2']
    OR: List['Problem_codeScalarWhereWithAggregatesInputRecursive2']
    NOT: List['Problem_codeScalarWhereWithAggregatesInputRecursive2']


class Problem_codeScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Problem_code arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    function: Union[_str, 'types.StringWithAggregatesFilter']
    language: 'enums.Language'
    testcases: Union[_str, 'types.StringWithAggregatesFilter']
    checker: Union[_str, 'types.StringWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Problem_codeScalarWhereWithAggregatesInputRecursive3']
    OR: List['Problem_codeScalarWhereWithAggregatesInputRecursive3']
    NOT: List['Problem_codeScalarWhereWithAggregatesInputRecursive3']


class Problem_codeScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Problem_code arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    function: Union[_str, 'types.StringWithAggregatesFilter']
    language: 'enums.Language'
    testcases: Union[_str, 'types.StringWithAggregatesFilter']
    checker: Union[_str, 'types.StringWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['Problem_codeScalarWhereWithAggregatesInputRecursive4']
    OR: List['Problem_codeScalarWhereWithAggregatesInputRecursive4']
    NOT: List['Problem_codeScalarWhereWithAggregatesInputRecursive4']


class Problem_codeScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Problem_code arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    function: Union[_str, 'types.StringWithAggregatesFilter']
    language: 'enums.Language'
    testcases: Union[_str, 'types.StringWithAggregatesFilter']
    checker: Union[_str, 'types.StringWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class Problem_codeGroupByOutput(TypedDict, total=False):
    id: _int
    function: _str
    language: 'enums.Language'
    testcases: _str
    checker: _str
    problemId: _int
    userId: _int
    createdAt: datetime.datetime
    _sum: 'Problem_codeSumAggregateOutput'
    _avg: 'Problem_codeAvgAggregateOutput'
    _min: 'Problem_codeMinAggregateOutput'
    _max: 'Problem_codeMaxAggregateOutput'
    _count: 'Problem_codeCountAggregateOutput'


class Problem_codeAvgAggregateOutput(TypedDict, total=False):
    """Problem_code output for aggregating averages"""
    id: float
    problemId: float
    userId: float


class Problem_codeSumAggregateOutput(TypedDict, total=False):
    """Problem_code output for aggregating sums"""
    id: _int
    problemId: _int
    userId: _int


class Problem_codeScalarAggregateOutput(TypedDict, total=False):
    """Problem_code output including scalar fields"""
    id: _int
    function: _str
    language: 'enums.Language'
    testcases: _str
    checker: _str
    problemId: _int
    userId: _int
    createdAt: datetime.datetime


Problem_codeMinAggregateOutput = Problem_codeScalarAggregateOutput
Problem_codeMaxAggregateOutput = Problem_codeScalarAggregateOutput


class Problem_codeMaxAggregateInput(TypedDict, total=False):
    """Problem_code input for aggregating by max"""
    id: bool
    function: bool
    language: bool
    testcases: bool
    checker: bool
    problemId: bool
    userId: bool
    createdAt: bool


class Problem_codeMinAggregateInput(TypedDict, total=False):
    """Problem_code input for aggregating by min"""
    id: bool
    function: bool
    language: bool
    testcases: bool
    checker: bool
    problemId: bool
    userId: bool
    createdAt: bool


class Problem_codeNumberAggregateInput(TypedDict, total=False):
    """Problem_code input for aggregating numbers"""
    id: bool
    problemId: bool
    userId: bool


Problem_codeAvgAggregateInput = Problem_codeNumberAggregateInput
Problem_codeSumAggregateInput = Problem_codeNumberAggregateInput


Problem_codeCountAggregateInput = TypedDict(
    'Problem_codeCountAggregateInput',
    {
        'id': bool,
        'function': bool,
        'language': bool,
        'testcases': bool,
        'checker': bool,
        'problemId': bool,
        'userId': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

Problem_codeCountAggregateOutput = TypedDict(
    'Problem_codeCountAggregateOutput',
    {
        'id': int,
        'function': int,
        'language': int,
        'testcases': int,
        'checker': int,
        'problemId': int,
        'userId': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


Problem_codeKeys = Literal[
    'id',
    'function',
    'language',
    'testcases',
    'checker',
    'problem',
    'problemId',
    'user',
    'userId',
    'createdAt',
]
Problem_codeScalarFieldKeys = Literal[
    'id',
    'function',
    'language',
    'testcases',
    'checker',
    'problemId',
    'userId',
    'createdAt',
]
Problem_codeScalarFieldKeysT = TypeVar('Problem_codeScalarFieldKeysT', bound=Problem_codeScalarFieldKeys)

Problem_codeRelationalFieldKeys = Literal[
        'problem',
        'user',
    ]

# Submission types

class SubmissionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Submission create method"""
    id: _int
    user: 'UserCreateNestedWithoutRelationsInput'
    userId: _int
    problem: 'ProblemCreateNestedWithoutRelationsInput'
    problemId: _int
    createdAt: datetime.datetime


class SubmissionCreateInput(SubmissionOptionalCreateInput):
    """Required arguments to the Submission create method"""
    code: _str
    language: 'enums.Language'
    status: _str
    score: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SubmissionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Submission create method, without relations"""
    id: _int
    userId: _int
    problemId: _int
    createdAt: datetime.datetime


class SubmissionCreateWithoutRelationsInput(SubmissionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Submission create method, without relations"""
    code: _str
    language: 'enums.Language'
    status: _str
    score: _int

class SubmissionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SubmissionCreateWithoutRelationsInput'
    where: 'SubmissionWhereUniqueInput'

class SubmissionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SubmissionCreateWithoutRelationsInput'
    connect: 'SubmissionWhereUniqueInput'
    connect_or_create: 'SubmissionConnectOrCreateWithoutRelationsInput'


class SubmissionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SubmissionCreateWithoutRelationsInput', List['SubmissionCreateWithoutRelationsInput']]
    connect: Union['SubmissionWhereUniqueInput', List['SubmissionWhereUniqueInput']]
    connect_or_create: Union['SubmissionConnectOrCreateWithoutRelationsInput', List['SubmissionConnectOrCreateWithoutRelationsInput']]

_SubmissionWhereUnique_id_Input = TypedDict(
    '_SubmissionWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

SubmissionWhereUniqueInput = _SubmissionWhereUnique_id_Input


class SubmissionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    code: _str
    language: 'enums.Language'
    status: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    problem: 'ProblemUpdateOneWithoutRelationsInput'
    score: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime


class SubmissionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    code: _str
    language: 'enums.Language'
    status: _str
    score: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime


class SubmissionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SubmissionCreateWithoutRelationsInput']
    connect: List['SubmissionWhereUniqueInput']
    connect_or_create: List['SubmissionConnectOrCreateWithoutRelationsInput']
    set: List['SubmissionWhereUniqueInput']
    disconnect: List['SubmissionWhereUniqueInput']
    delete: List['SubmissionWhereUniqueInput']

    # TODO
    # update: List['SubmissionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SubmissionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SubmissionScalarWhereInput']
    # upsert: List['SubmissionUpserteWithWhereUniqueWithoutRelationsInput']


class SubmissionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SubmissionCreateWithoutRelationsInput'
    connect: 'SubmissionWhereUniqueInput'
    connect_or_create: 'SubmissionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SubmissionUpdateInput'
    # upsert: 'SubmissionUpsertWithoutRelationsInput'


class SubmissionUpsertInput(TypedDict):
    create: 'SubmissionCreateInput'
    update: 'SubmissionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Submission_id_OrderByInput = TypedDict(
    '_Submission_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Submission_code_OrderByInput = TypedDict(
    '_Submission_code_OrderByInput',
    {
        'code': 'SortOrder',
    },
    total=True
)

_Submission_language_OrderByInput = TypedDict(
    '_Submission_language_OrderByInput',
    {
        'language': 'SortOrder',
    },
    total=True
)

_Submission_status_OrderByInput = TypedDict(
    '_Submission_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Submission_userId_OrderByInput = TypedDict(
    '_Submission_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Submission_problemId_OrderByInput = TypedDict(
    '_Submission_problemId_OrderByInput',
    {
        'problemId': 'SortOrder',
    },
    total=True
)

_Submission_score_OrderByInput = TypedDict(
    '_Submission_score_OrderByInput',
    {
        'score': 'SortOrder',
    },
    total=True
)

_Submission_createdAt_OrderByInput = TypedDict(
    '_Submission_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Submission_RelevanceInner = TypedDict(
    '_Submission_RelevanceInner',
    {
        'fields': 'List[SubmissionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Submission_RelevanceOrderByInput = TypedDict(
    '_Submission_RelevanceOrderByInput',
    {
        '_relevance': '_Submission_RelevanceInner',
    },
    total=True
)

SubmissionOrderByInput = Union[
    '_Submission_id_OrderByInput',
    '_Submission_code_OrderByInput',
    '_Submission_language_OrderByInput',
    '_Submission_status_OrderByInput',
    '_Submission_userId_OrderByInput',
    '_Submission_problemId_OrderByInput',
    '_Submission_score_OrderByInput',
    '_Submission_createdAt_OrderByInput',
    '_Submission_RelevanceOrderByInput',
]



# recursive Submission types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SubmissionRelationFilter = TypedDict(
    'SubmissionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SubmissionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SubmissionInclude(TypedDict, total=False):
    """Submission relational arguments"""
    user: Union[bool, 'UserArgsFromSubmission']
    problem: Union[bool, 'ProblemArgsFromSubmission']


    

class UserIncludeFromSubmission(TypedDict, total=False):
    """Relational arguments for Submission"""
    problems: Union[bool, 'FindManyProblemArgsFromSubmissionRecursive1']
    contests: Union[bool, 'FindManyContestArgsFromSubmissionRecursive1']
    Submission: Union[bool, 'FindManySubmissionArgsFromSubmissionRecursive1']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromSubmissionRecursive1']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromSubmissionRecursive1']


class UserIncludeFromSubmissionRecursive1(TypedDict, total=False):
    """Relational arguments for Submission"""
    problems: Union[bool, 'FindManyProblemArgsFromSubmissionRecursive2']
    contests: Union[bool, 'FindManyContestArgsFromSubmissionRecursive2']
    Submission: Union[bool, 'FindManySubmissionArgsFromSubmissionRecursive2']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromSubmissionRecursive2']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromSubmissionRecursive2']


class UserIncludeFromSubmissionRecursive2(TypedDict, total=False):
    """Relational arguments for Submission"""
    problems: Union[bool, 'FindManyProblemArgsFromSubmissionRecursive3']
    contests: Union[bool, 'FindManyContestArgsFromSubmissionRecursive3']
    Submission: Union[bool, 'FindManySubmissionArgsFromSubmissionRecursive3']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromSubmissionRecursive3']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromSubmissionRecursive3']


class UserIncludeFromSubmissionRecursive3(TypedDict, total=False):
    """Relational arguments for Submission"""
    problems: Union[bool, 'FindManyProblemArgsFromSubmissionRecursive4']
    contests: Union[bool, 'FindManyContestArgsFromSubmissionRecursive4']
    Submission: Union[bool, 'FindManySubmissionArgsFromSubmissionRecursive4']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromSubmissionRecursive4']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromSubmissionRecursive4']


class UserIncludeFromSubmissionRecursive4(TypedDict, total=False):
    """Relational arguments for Submission"""

    

class UserArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    
    

class FindManyUserArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProblemIncludeFromSubmission(TypedDict, total=False):
    """Relational arguments for Submission"""
    creator: Union[bool, 'UserArgsFromSubmissionRecursive1']
    submissions: Union[bool, 'FindManySubmissionArgsFromSubmissionRecursive1']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromSubmissionRecursive1']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromSubmissionRecursive1']


class ProblemIncludeFromSubmissionRecursive1(TypedDict, total=False):
    """Relational arguments for Submission"""
    creator: Union[bool, 'UserArgsFromSubmissionRecursive2']
    submissions: Union[bool, 'FindManySubmissionArgsFromSubmissionRecursive2']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromSubmissionRecursive2']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromSubmissionRecursive2']


class ProblemIncludeFromSubmissionRecursive2(TypedDict, total=False):
    """Relational arguments for Submission"""
    creator: Union[bool, 'UserArgsFromSubmissionRecursive3']
    submissions: Union[bool, 'FindManySubmissionArgsFromSubmissionRecursive3']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromSubmissionRecursive3']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromSubmissionRecursive3']


class ProblemIncludeFromSubmissionRecursive3(TypedDict, total=False):
    """Relational arguments for Submission"""
    creator: Union[bool, 'UserArgsFromSubmissionRecursive4']
    submissions: Union[bool, 'FindManySubmissionArgsFromSubmissionRecursive4']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromSubmissionRecursive4']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromSubmissionRecursive4']


class ProblemIncludeFromSubmissionRecursive4(TypedDict, total=False):
    """Relational arguments for Submission"""

    

class ProblemArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ProblemIncludeFromProblemRecursive1'


class ProblemArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ProblemIncludeFromProblemRecursive2'


class ProblemArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ProblemIncludeFromProblemRecursive3'


class ProblemArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ProblemIncludeFromProblemRecursive4'


class ProblemArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    
    

class FindManyProblemArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive1'


class FindManyProblemArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive2'


class FindManyProblemArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive3'


class FindManyProblemArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive4'


class FindManyProblemArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    
    

class Problem_codeIncludeFromSubmission(TypedDict, total=False):
    """Relational arguments for Submission"""
    problem: Union[bool, 'ProblemArgsFromSubmissionRecursive1']
    user: Union[bool, 'UserArgsFromSubmissionRecursive1']


class Problem_codeIncludeFromSubmissionRecursive1(TypedDict, total=False):
    """Relational arguments for Submission"""
    problem: Union[bool, 'ProblemArgsFromSubmissionRecursive2']
    user: Union[bool, 'UserArgsFromSubmissionRecursive2']


class Problem_codeIncludeFromSubmissionRecursive2(TypedDict, total=False):
    """Relational arguments for Submission"""
    problem: Union[bool, 'ProblemArgsFromSubmissionRecursive3']
    user: Union[bool, 'UserArgsFromSubmissionRecursive3']


class Problem_codeIncludeFromSubmissionRecursive3(TypedDict, total=False):
    """Relational arguments for Submission"""
    problem: Union[bool, 'ProblemArgsFromSubmissionRecursive4']
    user: Union[bool, 'UserArgsFromSubmissionRecursive4']


class Problem_codeIncludeFromSubmissionRecursive4(TypedDict, total=False):
    """Relational arguments for Submission"""

    

class Problem_codeArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive1'


class Problem_codeArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive2'


class Problem_codeArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive3'


class Problem_codeArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive4'


class Problem_codeArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    
    

class FindManyProblem_codeArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive1'


class FindManyProblem_codeArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive2'


class FindManyProblem_codeArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive3'


class FindManyProblem_codeArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive4'


class FindManyProblem_codeArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    
    

class SubmissionIncludeFromSubmission(TypedDict, total=False):
    """Relational arguments for Submission"""
    user: Union[bool, 'UserArgsFromSubmissionRecursive1']
    problem: Union[bool, 'ProblemArgsFromSubmissionRecursive1']


class SubmissionIncludeFromSubmissionRecursive1(TypedDict, total=False):
    """Relational arguments for Submission"""
    user: Union[bool, 'UserArgsFromSubmissionRecursive2']
    problem: Union[bool, 'ProblemArgsFromSubmissionRecursive2']


class SubmissionIncludeFromSubmissionRecursive2(TypedDict, total=False):
    """Relational arguments for Submission"""
    user: Union[bool, 'UserArgsFromSubmissionRecursive3']
    problem: Union[bool, 'ProblemArgsFromSubmissionRecursive3']


class SubmissionIncludeFromSubmissionRecursive3(TypedDict, total=False):
    """Relational arguments for Submission"""
    user: Union[bool, 'UserArgsFromSubmissionRecursive4']
    problem: Union[bool, 'ProblemArgsFromSubmissionRecursive4']


class SubmissionIncludeFromSubmissionRecursive4(TypedDict, total=False):
    """Relational arguments for Submission"""

    

class SubmissionArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class SubmissionArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class SubmissionArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class SubmissionArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class SubmissionArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    
    

class FindManySubmissionArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class FindManySubmissionArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class FindManySubmissionArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class FindManySubmissionArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class FindManySubmissionArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    
    

class ContestIncludeFromSubmission(TypedDict, total=False):
    """Relational arguments for Submission"""
    creator: Union[bool, 'UserArgsFromSubmissionRecursive1']
    problems: Union[bool, 'FindManyContestProblemArgsFromSubmissionRecursive1']
    participants: Union[bool, 'FindManyContestParticipantArgsFromSubmissionRecursive1']


class ContestIncludeFromSubmissionRecursive1(TypedDict, total=False):
    """Relational arguments for Submission"""
    creator: Union[bool, 'UserArgsFromSubmissionRecursive2']
    problems: Union[bool, 'FindManyContestProblemArgsFromSubmissionRecursive2']
    participants: Union[bool, 'FindManyContestParticipantArgsFromSubmissionRecursive2']


class ContestIncludeFromSubmissionRecursive2(TypedDict, total=False):
    """Relational arguments for Submission"""
    creator: Union[bool, 'UserArgsFromSubmissionRecursive3']
    problems: Union[bool, 'FindManyContestProblemArgsFromSubmissionRecursive3']
    participants: Union[bool, 'FindManyContestParticipantArgsFromSubmissionRecursive3']


class ContestIncludeFromSubmissionRecursive3(TypedDict, total=False):
    """Relational arguments for Submission"""
    creator: Union[bool, 'UserArgsFromSubmissionRecursive4']
    problems: Union[bool, 'FindManyContestProblemArgsFromSubmissionRecursive4']
    participants: Union[bool, 'FindManyContestParticipantArgsFromSubmissionRecursive4']


class ContestIncludeFromSubmissionRecursive4(TypedDict, total=False):
    """Relational arguments for Submission"""

    

class ContestArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ContestIncludeFromContestRecursive1'


class ContestArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ContestIncludeFromContestRecursive2'


class ContestArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ContestIncludeFromContestRecursive3'


class ContestArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ContestIncludeFromContestRecursive4'


class ContestArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    
    

class FindManyContestArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive1'


class FindManyContestArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive2'


class FindManyContestArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive3'


class FindManyContestArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive4'


class FindManyContestArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    
    

class ContestProblemIncludeFromSubmission(TypedDict, total=False):
    """Relational arguments for Submission"""
    contest: Union[bool, 'ContestArgsFromSubmissionRecursive1']
    problem: Union[bool, 'ProblemArgsFromSubmissionRecursive1']


class ContestProblemIncludeFromSubmissionRecursive1(TypedDict, total=False):
    """Relational arguments for Submission"""
    contest: Union[bool, 'ContestArgsFromSubmissionRecursive2']
    problem: Union[bool, 'ProblemArgsFromSubmissionRecursive2']


class ContestProblemIncludeFromSubmissionRecursive2(TypedDict, total=False):
    """Relational arguments for Submission"""
    contest: Union[bool, 'ContestArgsFromSubmissionRecursive3']
    problem: Union[bool, 'ProblemArgsFromSubmissionRecursive3']


class ContestProblemIncludeFromSubmissionRecursive3(TypedDict, total=False):
    """Relational arguments for Submission"""
    contest: Union[bool, 'ContestArgsFromSubmissionRecursive4']
    problem: Union[bool, 'ProblemArgsFromSubmissionRecursive4']


class ContestProblemIncludeFromSubmissionRecursive4(TypedDict, total=False):
    """Relational arguments for Submission"""

    

class ContestProblemArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ContestProblemIncludeFromContestProblemRecursive1'


class ContestProblemArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ContestProblemIncludeFromContestProblemRecursive2'


class ContestProblemArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ContestProblemIncludeFromContestProblemRecursive3'


class ContestProblemArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ContestProblemIncludeFromContestProblemRecursive4'


class ContestProblemArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    
    

class FindManyContestProblemArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive1'


class FindManyContestProblemArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive2'


class FindManyContestProblemArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive3'


class FindManyContestProblemArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive4'


class FindManyContestProblemArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    
    

class ContestParticipantIncludeFromSubmission(TypedDict, total=False):
    """Relational arguments for Submission"""
    contest: Union[bool, 'ContestArgsFromSubmissionRecursive1']
    user: Union[bool, 'UserArgsFromSubmissionRecursive1']


class ContestParticipantIncludeFromSubmissionRecursive1(TypedDict, total=False):
    """Relational arguments for Submission"""
    contest: Union[bool, 'ContestArgsFromSubmissionRecursive2']
    user: Union[bool, 'UserArgsFromSubmissionRecursive2']


class ContestParticipantIncludeFromSubmissionRecursive2(TypedDict, total=False):
    """Relational arguments for Submission"""
    contest: Union[bool, 'ContestArgsFromSubmissionRecursive3']
    user: Union[bool, 'UserArgsFromSubmissionRecursive3']


class ContestParticipantIncludeFromSubmissionRecursive3(TypedDict, total=False):
    """Relational arguments for Submission"""
    contest: Union[bool, 'ContestArgsFromSubmissionRecursive4']
    user: Union[bool, 'UserArgsFromSubmissionRecursive4']


class ContestParticipantIncludeFromSubmissionRecursive4(TypedDict, total=False):
    """Relational arguments for Submission"""

    

class ContestParticipantArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive1'


class ContestParticipantArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive2'


class ContestParticipantArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive3'


class ContestParticipantArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive4'


class ContestParticipantArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    
    

class FindManyContestParticipantArgsFromSubmission(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive1'


class FindManyContestParticipantArgsFromSubmissionRecursive1(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive2'


class FindManyContestParticipantArgsFromSubmissionRecursive2(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive3'


class FindManyContestParticipantArgsFromSubmissionRecursive3(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive4'


class FindManyContestParticipantArgsFromSubmissionRecursive4(TypedDict, total=False):
    """Arguments for Submission"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    


FindManySubmissionArgs = FindManySubmissionArgsFromSubmission
FindFirstSubmissionArgs = FindManySubmissionArgsFromSubmission


    

class SubmissionWhereInput(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    code: Union[_str, 'types.StringFilter']
    language: 'enums.Language'
    status: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']
    score: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SubmissionWhereInputRecursive1', List['SubmissionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SubmissionWhereInputRecursive1']
    OR: List['SubmissionWhereInputRecursive1']
    NOT: List['SubmissionWhereInputRecursive1']


class SubmissionWhereInputRecursive1(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    code: Union[_str, 'types.StringFilter']
    language: 'enums.Language'
    status: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']
    score: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SubmissionWhereInputRecursive2', List['SubmissionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SubmissionWhereInputRecursive2']
    OR: List['SubmissionWhereInputRecursive2']
    NOT: List['SubmissionWhereInputRecursive2']


class SubmissionWhereInputRecursive2(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    code: Union[_str, 'types.StringFilter']
    language: 'enums.Language'
    status: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']
    score: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SubmissionWhereInputRecursive3', List['SubmissionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SubmissionWhereInputRecursive3']
    OR: List['SubmissionWhereInputRecursive3']
    NOT: List['SubmissionWhereInputRecursive3']


class SubmissionWhereInputRecursive3(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    code: Union[_str, 'types.StringFilter']
    language: 'enums.Language'
    status: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']
    score: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SubmissionWhereInputRecursive4', List['SubmissionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SubmissionWhereInputRecursive4']
    OR: List['SubmissionWhereInputRecursive4']
    NOT: List['SubmissionWhereInputRecursive4']


class SubmissionWhereInputRecursive4(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    code: Union[_str, 'types.StringFilter']
    language: 'enums.Language'
    status: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']
    score: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Submission types


    

class SubmissionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    language: 'enums.Language'
    status: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']
    score: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SubmissionScalarWhereWithAggregatesInputRecursive1']
    OR: List['SubmissionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SubmissionScalarWhereWithAggregatesInputRecursive1']


class SubmissionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    language: 'enums.Language'
    status: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']
    score: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SubmissionScalarWhereWithAggregatesInputRecursive2']
    OR: List['SubmissionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SubmissionScalarWhereWithAggregatesInputRecursive2']


class SubmissionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    language: 'enums.Language'
    status: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']
    score: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SubmissionScalarWhereWithAggregatesInputRecursive3']
    OR: List['SubmissionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SubmissionScalarWhereWithAggregatesInputRecursive3']


class SubmissionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    language: 'enums.Language'
    status: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']
    score: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SubmissionScalarWhereWithAggregatesInputRecursive4']
    OR: List['SubmissionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SubmissionScalarWhereWithAggregatesInputRecursive4']


class SubmissionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Submission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    language: 'enums.Language'
    status: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']
    score: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SubmissionGroupByOutput(TypedDict, total=False):
    id: _int
    code: _str
    language: 'enums.Language'
    status: _str
    userId: _int
    problemId: _int
    score: _int
    createdAt: datetime.datetime
    _sum: 'SubmissionSumAggregateOutput'
    _avg: 'SubmissionAvgAggregateOutput'
    _min: 'SubmissionMinAggregateOutput'
    _max: 'SubmissionMaxAggregateOutput'
    _count: 'SubmissionCountAggregateOutput'


class SubmissionAvgAggregateOutput(TypedDict, total=False):
    """Submission output for aggregating averages"""
    id: float
    userId: float
    problemId: float
    score: float


class SubmissionSumAggregateOutput(TypedDict, total=False):
    """Submission output for aggregating sums"""
    id: _int
    userId: _int
    problemId: _int
    score: _int


class SubmissionScalarAggregateOutput(TypedDict, total=False):
    """Submission output including scalar fields"""
    id: _int
    code: _str
    language: 'enums.Language'
    status: _str
    userId: _int
    problemId: _int
    score: _int
    createdAt: datetime.datetime


SubmissionMinAggregateOutput = SubmissionScalarAggregateOutput
SubmissionMaxAggregateOutput = SubmissionScalarAggregateOutput


class SubmissionMaxAggregateInput(TypedDict, total=False):
    """Submission input for aggregating by max"""
    id: bool
    code: bool
    language: bool
    status: bool
    userId: bool
    problemId: bool
    score: bool
    createdAt: bool


class SubmissionMinAggregateInput(TypedDict, total=False):
    """Submission input for aggregating by min"""
    id: bool
    code: bool
    language: bool
    status: bool
    userId: bool
    problemId: bool
    score: bool
    createdAt: bool


class SubmissionNumberAggregateInput(TypedDict, total=False):
    """Submission input for aggregating numbers"""
    id: bool
    userId: bool
    problemId: bool
    score: bool


SubmissionAvgAggregateInput = SubmissionNumberAggregateInput
SubmissionSumAggregateInput = SubmissionNumberAggregateInput


SubmissionCountAggregateInput = TypedDict(
    'SubmissionCountAggregateInput',
    {
        'id': bool,
        'code': bool,
        'language': bool,
        'status': bool,
        'userId': bool,
        'problemId': bool,
        'score': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

SubmissionCountAggregateOutput = TypedDict(
    'SubmissionCountAggregateOutput',
    {
        'id': int,
        'code': int,
        'language': int,
        'status': int,
        'userId': int,
        'problemId': int,
        'score': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


SubmissionKeys = Literal[
    'id',
    'code',
    'language',
    'status',
    'user',
    'userId',
    'problem',
    'problemId',
    'score',
    'createdAt',
]
SubmissionScalarFieldKeys = Literal[
    'id',
    'code',
    'language',
    'status',
    'userId',
    'problemId',
    'score',
    'createdAt',
]
SubmissionScalarFieldKeysT = TypeVar('SubmissionScalarFieldKeysT', bound=SubmissionScalarFieldKeys)

SubmissionRelationalFieldKeys = Literal[
        'user',
        'problem',
    ]

# Contest types

class ContestOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Contest create method"""
    id: _int
    creator: 'UserCreateNestedWithoutRelationsInput'
    creatorId: _int
    problems: 'ContestProblemCreateManyNestedWithoutRelationsInput'
    participants: 'ContestParticipantCreateManyNestedWithoutRelationsInput'


class ContestCreateInput(ContestOptionalCreateInput):
    """Required arguments to the Contest create method"""
    title: _str
    description: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ContestOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Contest create method, without relations"""
    id: _int
    creatorId: _int


class ContestCreateWithoutRelationsInput(ContestOptionalCreateWithoutRelationsInput):
    """Required arguments to the Contest create method, without relations"""
    title: _str
    description: _str

class ContestConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ContestCreateWithoutRelationsInput'
    where: 'ContestWhereUniqueInput'

class ContestCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ContestCreateWithoutRelationsInput'
    connect: 'ContestWhereUniqueInput'
    connect_or_create: 'ContestConnectOrCreateWithoutRelationsInput'


class ContestCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ContestCreateWithoutRelationsInput', List['ContestCreateWithoutRelationsInput']]
    connect: Union['ContestWhereUniqueInput', List['ContestWhereUniqueInput']]
    connect_or_create: Union['ContestConnectOrCreateWithoutRelationsInput', List['ContestConnectOrCreateWithoutRelationsInput']]

_ContestWhereUnique_id_Input = TypedDict(
    '_ContestWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ContestWhereUniqueInput = _ContestWhereUnique_id_Input


class ContestUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    title: _str
    description: _str
    creator: 'UserUpdateOneWithoutRelationsInput'
    problems: 'ContestProblemUpdateManyWithoutRelationsInput'
    participants: 'ContestParticipantUpdateManyWithoutRelationsInput'


class ContestUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    title: _str
    description: _str


class ContestUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ContestCreateWithoutRelationsInput']
    connect: List['ContestWhereUniqueInput']
    connect_or_create: List['ContestConnectOrCreateWithoutRelationsInput']
    set: List['ContestWhereUniqueInput']
    disconnect: List['ContestWhereUniqueInput']
    delete: List['ContestWhereUniqueInput']

    # TODO
    # update: List['ContestUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ContestUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ContestScalarWhereInput']
    # upsert: List['ContestUpserteWithWhereUniqueWithoutRelationsInput']


class ContestUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ContestCreateWithoutRelationsInput'
    connect: 'ContestWhereUniqueInput'
    connect_or_create: 'ContestConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ContestUpdateInput'
    # upsert: 'ContestUpsertWithoutRelationsInput'


class ContestUpsertInput(TypedDict):
    create: 'ContestCreateInput'
    update: 'ContestUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Contest_id_OrderByInput = TypedDict(
    '_Contest_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Contest_title_OrderByInput = TypedDict(
    '_Contest_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Contest_description_OrderByInput = TypedDict(
    '_Contest_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Contest_creatorId_OrderByInput = TypedDict(
    '_Contest_creatorId_OrderByInput',
    {
        'creatorId': 'SortOrder',
    },
    total=True
)

_Contest_RelevanceInner = TypedDict(
    '_Contest_RelevanceInner',
    {
        'fields': 'List[ContestScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Contest_RelevanceOrderByInput = TypedDict(
    '_Contest_RelevanceOrderByInput',
    {
        '_relevance': '_Contest_RelevanceInner',
    },
    total=True
)

ContestOrderByInput = Union[
    '_Contest_id_OrderByInput',
    '_Contest_title_OrderByInput',
    '_Contest_description_OrderByInput',
    '_Contest_creatorId_OrderByInput',
    '_Contest_RelevanceOrderByInput',
]



# recursive Contest types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ContestRelationFilter = TypedDict(
    'ContestRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ContestListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ContestInclude(TypedDict, total=False):
    """Contest relational arguments"""
    creator: Union[bool, 'UserArgsFromContest']
    problems: Union[bool, 'FindManyContestProblemArgsFromContest']
    participants: Union[bool, 'FindManyContestParticipantArgsFromContest']


    

class UserIncludeFromContest(TypedDict, total=False):
    """Relational arguments for Contest"""
    problems: Union[bool, 'FindManyProblemArgsFromContestRecursive1']
    contests: Union[bool, 'FindManyContestArgsFromContestRecursive1']
    Submission: Union[bool, 'FindManySubmissionArgsFromContestRecursive1']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromContestRecursive1']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestRecursive1']


class UserIncludeFromContestRecursive1(TypedDict, total=False):
    """Relational arguments for Contest"""
    problems: Union[bool, 'FindManyProblemArgsFromContestRecursive2']
    contests: Union[bool, 'FindManyContestArgsFromContestRecursive2']
    Submission: Union[bool, 'FindManySubmissionArgsFromContestRecursive2']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromContestRecursive2']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestRecursive2']


class UserIncludeFromContestRecursive2(TypedDict, total=False):
    """Relational arguments for Contest"""
    problems: Union[bool, 'FindManyProblemArgsFromContestRecursive3']
    contests: Union[bool, 'FindManyContestArgsFromContestRecursive3']
    Submission: Union[bool, 'FindManySubmissionArgsFromContestRecursive3']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromContestRecursive3']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestRecursive3']


class UserIncludeFromContestRecursive3(TypedDict, total=False):
    """Relational arguments for Contest"""
    problems: Union[bool, 'FindManyProblemArgsFromContestRecursive4']
    contests: Union[bool, 'FindManyContestArgsFromContestRecursive4']
    Submission: Union[bool, 'FindManySubmissionArgsFromContestRecursive4']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromContestRecursive4']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestRecursive4']


class UserIncludeFromContestRecursive4(TypedDict, total=False):
    """Relational arguments for Contest"""

    

class UserArgsFromContest(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromContestRecursive1(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromContestRecursive2(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromContestRecursive3(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromContestRecursive4(TypedDict, total=False):
    """Arguments for Contest"""
    
    

class FindManyUserArgsFromContest(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromContestRecursive1(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromContestRecursive2(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromContestRecursive3(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromContestRecursive4(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProblemIncludeFromContest(TypedDict, total=False):
    """Relational arguments for Contest"""
    creator: Union[bool, 'UserArgsFromContestRecursive1']
    submissions: Union[bool, 'FindManySubmissionArgsFromContestRecursive1']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromContestRecursive1']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestRecursive1']


class ProblemIncludeFromContestRecursive1(TypedDict, total=False):
    """Relational arguments for Contest"""
    creator: Union[bool, 'UserArgsFromContestRecursive2']
    submissions: Union[bool, 'FindManySubmissionArgsFromContestRecursive2']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromContestRecursive2']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestRecursive2']


class ProblemIncludeFromContestRecursive2(TypedDict, total=False):
    """Relational arguments for Contest"""
    creator: Union[bool, 'UserArgsFromContestRecursive3']
    submissions: Union[bool, 'FindManySubmissionArgsFromContestRecursive3']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromContestRecursive3']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestRecursive3']


class ProblemIncludeFromContestRecursive3(TypedDict, total=False):
    """Relational arguments for Contest"""
    creator: Union[bool, 'UserArgsFromContestRecursive4']
    submissions: Union[bool, 'FindManySubmissionArgsFromContestRecursive4']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromContestRecursive4']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestRecursive4']


class ProblemIncludeFromContestRecursive4(TypedDict, total=False):
    """Relational arguments for Contest"""

    

class ProblemArgsFromContest(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ProblemIncludeFromProblemRecursive1'


class ProblemArgsFromContestRecursive1(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ProblemIncludeFromProblemRecursive2'


class ProblemArgsFromContestRecursive2(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ProblemIncludeFromProblemRecursive3'


class ProblemArgsFromContestRecursive3(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ProblemIncludeFromProblemRecursive4'


class ProblemArgsFromContestRecursive4(TypedDict, total=False):
    """Arguments for Contest"""
    
    

class FindManyProblemArgsFromContest(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive1'


class FindManyProblemArgsFromContestRecursive1(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive2'


class FindManyProblemArgsFromContestRecursive2(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive3'


class FindManyProblemArgsFromContestRecursive3(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive4'


class FindManyProblemArgsFromContestRecursive4(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    
    

class Problem_codeIncludeFromContest(TypedDict, total=False):
    """Relational arguments for Contest"""
    problem: Union[bool, 'ProblemArgsFromContestRecursive1']
    user: Union[bool, 'UserArgsFromContestRecursive1']


class Problem_codeIncludeFromContestRecursive1(TypedDict, total=False):
    """Relational arguments for Contest"""
    problem: Union[bool, 'ProblemArgsFromContestRecursive2']
    user: Union[bool, 'UserArgsFromContestRecursive2']


class Problem_codeIncludeFromContestRecursive2(TypedDict, total=False):
    """Relational arguments for Contest"""
    problem: Union[bool, 'ProblemArgsFromContestRecursive3']
    user: Union[bool, 'UserArgsFromContestRecursive3']


class Problem_codeIncludeFromContestRecursive3(TypedDict, total=False):
    """Relational arguments for Contest"""
    problem: Union[bool, 'ProblemArgsFromContestRecursive4']
    user: Union[bool, 'UserArgsFromContestRecursive4']


class Problem_codeIncludeFromContestRecursive4(TypedDict, total=False):
    """Relational arguments for Contest"""

    

class Problem_codeArgsFromContest(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive1'


class Problem_codeArgsFromContestRecursive1(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive2'


class Problem_codeArgsFromContestRecursive2(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive3'


class Problem_codeArgsFromContestRecursive3(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive4'


class Problem_codeArgsFromContestRecursive4(TypedDict, total=False):
    """Arguments for Contest"""
    
    

class FindManyProblem_codeArgsFromContest(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive1'


class FindManyProblem_codeArgsFromContestRecursive1(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive2'


class FindManyProblem_codeArgsFromContestRecursive2(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive3'


class FindManyProblem_codeArgsFromContestRecursive3(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive4'


class FindManyProblem_codeArgsFromContestRecursive4(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    
    

class SubmissionIncludeFromContest(TypedDict, total=False):
    """Relational arguments for Contest"""
    user: Union[bool, 'UserArgsFromContestRecursive1']
    problem: Union[bool, 'ProblemArgsFromContestRecursive1']


class SubmissionIncludeFromContestRecursive1(TypedDict, total=False):
    """Relational arguments for Contest"""
    user: Union[bool, 'UserArgsFromContestRecursive2']
    problem: Union[bool, 'ProblemArgsFromContestRecursive2']


class SubmissionIncludeFromContestRecursive2(TypedDict, total=False):
    """Relational arguments for Contest"""
    user: Union[bool, 'UserArgsFromContestRecursive3']
    problem: Union[bool, 'ProblemArgsFromContestRecursive3']


class SubmissionIncludeFromContestRecursive3(TypedDict, total=False):
    """Relational arguments for Contest"""
    user: Union[bool, 'UserArgsFromContestRecursive4']
    problem: Union[bool, 'ProblemArgsFromContestRecursive4']


class SubmissionIncludeFromContestRecursive4(TypedDict, total=False):
    """Relational arguments for Contest"""

    

class SubmissionArgsFromContest(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class SubmissionArgsFromContestRecursive1(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class SubmissionArgsFromContestRecursive2(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class SubmissionArgsFromContestRecursive3(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class SubmissionArgsFromContestRecursive4(TypedDict, total=False):
    """Arguments for Contest"""
    
    

class FindManySubmissionArgsFromContest(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class FindManySubmissionArgsFromContestRecursive1(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class FindManySubmissionArgsFromContestRecursive2(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class FindManySubmissionArgsFromContestRecursive3(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class FindManySubmissionArgsFromContestRecursive4(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    
    

class ContestIncludeFromContest(TypedDict, total=False):
    """Relational arguments for Contest"""
    creator: Union[bool, 'UserArgsFromContestRecursive1']
    problems: Union[bool, 'FindManyContestProblemArgsFromContestRecursive1']
    participants: Union[bool, 'FindManyContestParticipantArgsFromContestRecursive1']


class ContestIncludeFromContestRecursive1(TypedDict, total=False):
    """Relational arguments for Contest"""
    creator: Union[bool, 'UserArgsFromContestRecursive2']
    problems: Union[bool, 'FindManyContestProblemArgsFromContestRecursive2']
    participants: Union[bool, 'FindManyContestParticipantArgsFromContestRecursive2']


class ContestIncludeFromContestRecursive2(TypedDict, total=False):
    """Relational arguments for Contest"""
    creator: Union[bool, 'UserArgsFromContestRecursive3']
    problems: Union[bool, 'FindManyContestProblemArgsFromContestRecursive3']
    participants: Union[bool, 'FindManyContestParticipantArgsFromContestRecursive3']


class ContestIncludeFromContestRecursive3(TypedDict, total=False):
    """Relational arguments for Contest"""
    creator: Union[bool, 'UserArgsFromContestRecursive4']
    problems: Union[bool, 'FindManyContestProblemArgsFromContestRecursive4']
    participants: Union[bool, 'FindManyContestParticipantArgsFromContestRecursive4']


class ContestIncludeFromContestRecursive4(TypedDict, total=False):
    """Relational arguments for Contest"""

    

class ContestArgsFromContest(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ContestIncludeFromContestRecursive1'


class ContestArgsFromContestRecursive1(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ContestIncludeFromContestRecursive2'


class ContestArgsFromContestRecursive2(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ContestIncludeFromContestRecursive3'


class ContestArgsFromContestRecursive3(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ContestIncludeFromContestRecursive4'


class ContestArgsFromContestRecursive4(TypedDict, total=False):
    """Arguments for Contest"""
    
    

class FindManyContestArgsFromContest(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive1'


class FindManyContestArgsFromContestRecursive1(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive2'


class FindManyContestArgsFromContestRecursive2(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive3'


class FindManyContestArgsFromContestRecursive3(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive4'


class FindManyContestArgsFromContestRecursive4(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    
    

class ContestProblemIncludeFromContest(TypedDict, total=False):
    """Relational arguments for Contest"""
    contest: Union[bool, 'ContestArgsFromContestRecursive1']
    problem: Union[bool, 'ProblemArgsFromContestRecursive1']


class ContestProblemIncludeFromContestRecursive1(TypedDict, total=False):
    """Relational arguments for Contest"""
    contest: Union[bool, 'ContestArgsFromContestRecursive2']
    problem: Union[bool, 'ProblemArgsFromContestRecursive2']


class ContestProblemIncludeFromContestRecursive2(TypedDict, total=False):
    """Relational arguments for Contest"""
    contest: Union[bool, 'ContestArgsFromContestRecursive3']
    problem: Union[bool, 'ProblemArgsFromContestRecursive3']


class ContestProblemIncludeFromContestRecursive3(TypedDict, total=False):
    """Relational arguments for Contest"""
    contest: Union[bool, 'ContestArgsFromContestRecursive4']
    problem: Union[bool, 'ProblemArgsFromContestRecursive4']


class ContestProblemIncludeFromContestRecursive4(TypedDict, total=False):
    """Relational arguments for Contest"""

    

class ContestProblemArgsFromContest(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ContestProblemIncludeFromContestProblemRecursive1'


class ContestProblemArgsFromContestRecursive1(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ContestProblemIncludeFromContestProblemRecursive2'


class ContestProblemArgsFromContestRecursive2(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ContestProblemIncludeFromContestProblemRecursive3'


class ContestProblemArgsFromContestRecursive3(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ContestProblemIncludeFromContestProblemRecursive4'


class ContestProblemArgsFromContestRecursive4(TypedDict, total=False):
    """Arguments for Contest"""
    
    

class FindManyContestProblemArgsFromContest(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive1'


class FindManyContestProblemArgsFromContestRecursive1(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive2'


class FindManyContestProblemArgsFromContestRecursive2(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive3'


class FindManyContestProblemArgsFromContestRecursive3(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive4'


class FindManyContestProblemArgsFromContestRecursive4(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    
    

class ContestParticipantIncludeFromContest(TypedDict, total=False):
    """Relational arguments for Contest"""
    contest: Union[bool, 'ContestArgsFromContestRecursive1']
    user: Union[bool, 'UserArgsFromContestRecursive1']


class ContestParticipantIncludeFromContestRecursive1(TypedDict, total=False):
    """Relational arguments for Contest"""
    contest: Union[bool, 'ContestArgsFromContestRecursive2']
    user: Union[bool, 'UserArgsFromContestRecursive2']


class ContestParticipantIncludeFromContestRecursive2(TypedDict, total=False):
    """Relational arguments for Contest"""
    contest: Union[bool, 'ContestArgsFromContestRecursive3']
    user: Union[bool, 'UserArgsFromContestRecursive3']


class ContestParticipantIncludeFromContestRecursive3(TypedDict, total=False):
    """Relational arguments for Contest"""
    contest: Union[bool, 'ContestArgsFromContestRecursive4']
    user: Union[bool, 'UserArgsFromContestRecursive4']


class ContestParticipantIncludeFromContestRecursive4(TypedDict, total=False):
    """Relational arguments for Contest"""

    

class ContestParticipantArgsFromContest(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive1'


class ContestParticipantArgsFromContestRecursive1(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive2'


class ContestParticipantArgsFromContestRecursive2(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive3'


class ContestParticipantArgsFromContestRecursive3(TypedDict, total=False):
    """Arguments for Contest"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive4'


class ContestParticipantArgsFromContestRecursive4(TypedDict, total=False):
    """Arguments for Contest"""
    
    

class FindManyContestParticipantArgsFromContest(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive1'


class FindManyContestParticipantArgsFromContestRecursive1(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive2'


class FindManyContestParticipantArgsFromContestRecursive2(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive3'


class FindManyContestParticipantArgsFromContestRecursive3(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive4'


class FindManyContestParticipantArgsFromContestRecursive4(TypedDict, total=False):
    """Arguments for Contest"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    


FindManyContestArgs = FindManyContestArgsFromContest
FindFirstContestArgs = FindManyContestArgsFromContest


    

class ContestWhereInput(TypedDict, total=False):
    """Contest arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    creator: 'UserRelationFilter'
    creatorId: Union[_int, 'types.IntFilter']
    problems: 'ContestProblemListRelationFilter'
    participants: 'ContestParticipantListRelationFilter'

    # should be noted that AND and NOT should be Union['ContestWhereInputRecursive1', List['ContestWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ContestWhereInputRecursive1']
    OR: List['ContestWhereInputRecursive1']
    NOT: List['ContestWhereInputRecursive1']


class ContestWhereInputRecursive1(TypedDict, total=False):
    """Contest arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    creator: 'UserRelationFilter'
    creatorId: Union[_int, 'types.IntFilter']
    problems: 'ContestProblemListRelationFilter'
    participants: 'ContestParticipantListRelationFilter'

    # should be noted that AND and NOT should be Union['ContestWhereInputRecursive2', List['ContestWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ContestWhereInputRecursive2']
    OR: List['ContestWhereInputRecursive2']
    NOT: List['ContestWhereInputRecursive2']


class ContestWhereInputRecursive2(TypedDict, total=False):
    """Contest arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    creator: 'UserRelationFilter'
    creatorId: Union[_int, 'types.IntFilter']
    problems: 'ContestProblemListRelationFilter'
    participants: 'ContestParticipantListRelationFilter'

    # should be noted that AND and NOT should be Union['ContestWhereInputRecursive3', List['ContestWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ContestWhereInputRecursive3']
    OR: List['ContestWhereInputRecursive3']
    NOT: List['ContestWhereInputRecursive3']


class ContestWhereInputRecursive3(TypedDict, total=False):
    """Contest arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    creator: 'UserRelationFilter'
    creatorId: Union[_int, 'types.IntFilter']
    problems: 'ContestProblemListRelationFilter'
    participants: 'ContestParticipantListRelationFilter'

    # should be noted that AND and NOT should be Union['ContestWhereInputRecursive4', List['ContestWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ContestWhereInputRecursive4']
    OR: List['ContestWhereInputRecursive4']
    NOT: List['ContestWhereInputRecursive4']


class ContestWhereInputRecursive4(TypedDict, total=False):
    """Contest arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    creator: 'UserRelationFilter'
    creatorId: Union[_int, 'types.IntFilter']
    problems: 'ContestProblemListRelationFilter'
    participants: 'ContestParticipantListRelationFilter'



# aggregate Contest types


    

class ContestScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Contest arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    creatorId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ContestScalarWhereWithAggregatesInputRecursive1']
    OR: List['ContestScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ContestScalarWhereWithAggregatesInputRecursive1']


class ContestScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Contest arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    creatorId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ContestScalarWhereWithAggregatesInputRecursive2']
    OR: List['ContestScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ContestScalarWhereWithAggregatesInputRecursive2']


class ContestScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Contest arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    creatorId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ContestScalarWhereWithAggregatesInputRecursive3']
    OR: List['ContestScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ContestScalarWhereWithAggregatesInputRecursive3']


class ContestScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Contest arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    creatorId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ContestScalarWhereWithAggregatesInputRecursive4']
    OR: List['ContestScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ContestScalarWhereWithAggregatesInputRecursive4']


class ContestScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Contest arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    creatorId: Union[_int, 'types.IntWithAggregatesFilter']



class ContestGroupByOutput(TypedDict, total=False):
    id: _int
    title: _str
    description: _str
    creatorId: _int
    _sum: 'ContestSumAggregateOutput'
    _avg: 'ContestAvgAggregateOutput'
    _min: 'ContestMinAggregateOutput'
    _max: 'ContestMaxAggregateOutput'
    _count: 'ContestCountAggregateOutput'


class ContestAvgAggregateOutput(TypedDict, total=False):
    """Contest output for aggregating averages"""
    id: float
    creatorId: float


class ContestSumAggregateOutput(TypedDict, total=False):
    """Contest output for aggregating sums"""
    id: _int
    creatorId: _int


class ContestScalarAggregateOutput(TypedDict, total=False):
    """Contest output including scalar fields"""
    id: _int
    title: _str
    description: _str
    creatorId: _int


ContestMinAggregateOutput = ContestScalarAggregateOutput
ContestMaxAggregateOutput = ContestScalarAggregateOutput


class ContestMaxAggregateInput(TypedDict, total=False):
    """Contest input for aggregating by max"""
    id: bool
    title: bool
    description: bool
    creatorId: bool


class ContestMinAggregateInput(TypedDict, total=False):
    """Contest input for aggregating by min"""
    id: bool
    title: bool
    description: bool
    creatorId: bool


class ContestNumberAggregateInput(TypedDict, total=False):
    """Contest input for aggregating numbers"""
    id: bool
    creatorId: bool


ContestAvgAggregateInput = ContestNumberAggregateInput
ContestSumAggregateInput = ContestNumberAggregateInput


ContestCountAggregateInput = TypedDict(
    'ContestCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'description': bool,
        'creatorId': bool,
        '_all': bool,
    },
    total=False,
)

ContestCountAggregateOutput = TypedDict(
    'ContestCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'description': int,
        'creatorId': int,
        '_all': int,
    },
    total=False,
)


ContestKeys = Literal[
    'id',
    'title',
    'description',
    'creator',
    'creatorId',
    'problems',
    'participants',
]
ContestScalarFieldKeys = Literal[
    'id',
    'title',
    'description',
    'creatorId',
]
ContestScalarFieldKeysT = TypeVar('ContestScalarFieldKeysT', bound=ContestScalarFieldKeys)

ContestRelationalFieldKeys = Literal[
        'creator',
        'problems',
        'participants',
    ]

# ContestProblem types

class ContestProblemOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ContestProblem create method"""
    id: _int
    contest: 'ContestCreateNestedWithoutRelationsInput'
    contestId: _int
    problem: 'ProblemCreateNestedWithoutRelationsInput'
    problemId: _int


class ContestProblemCreateInput(ContestProblemOptionalCreateInput):
    """Required arguments to the ContestProblem create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ContestProblemOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ContestProblem create method, without relations"""
    id: _int
    contestId: _int
    problemId: _int


class ContestProblemCreateWithoutRelationsInput(ContestProblemOptionalCreateWithoutRelationsInput):
    """Required arguments to the ContestProblem create method, without relations"""

class ContestProblemConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ContestProblemCreateWithoutRelationsInput'
    where: 'ContestProblemWhereUniqueInput'

class ContestProblemCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ContestProblemCreateWithoutRelationsInput'
    connect: 'ContestProblemWhereUniqueInput'
    connect_or_create: 'ContestProblemConnectOrCreateWithoutRelationsInput'


class ContestProblemCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ContestProblemCreateWithoutRelationsInput', List['ContestProblemCreateWithoutRelationsInput']]
    connect: Union['ContestProblemWhereUniqueInput', List['ContestProblemWhereUniqueInput']]
    connect_or_create: Union['ContestProblemConnectOrCreateWithoutRelationsInput', List['ContestProblemConnectOrCreateWithoutRelationsInput']]

_ContestProblemWhereUnique_id_Input = TypedDict(
    '_ContestProblemWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ContestProblemWhereUniqueInput = _ContestProblemWhereUnique_id_Input


class ContestProblemUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    contest: 'ContestUpdateOneWithoutRelationsInput'
    problem: 'ProblemUpdateOneWithoutRelationsInput'


class ContestProblemUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]


class ContestProblemUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ContestProblemCreateWithoutRelationsInput']
    connect: List['ContestProblemWhereUniqueInput']
    connect_or_create: List['ContestProblemConnectOrCreateWithoutRelationsInput']
    set: List['ContestProblemWhereUniqueInput']
    disconnect: List['ContestProblemWhereUniqueInput']
    delete: List['ContestProblemWhereUniqueInput']

    # TODO
    # update: List['ContestProblemUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ContestProblemUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ContestProblemScalarWhereInput']
    # upsert: List['ContestProblemUpserteWithWhereUniqueWithoutRelationsInput']


class ContestProblemUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ContestProblemCreateWithoutRelationsInput'
    connect: 'ContestProblemWhereUniqueInput'
    connect_or_create: 'ContestProblemConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ContestProblemUpdateInput'
    # upsert: 'ContestProblemUpsertWithoutRelationsInput'


class ContestProblemUpsertInput(TypedDict):
    create: 'ContestProblemCreateInput'
    update: 'ContestProblemUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ContestProblem_id_OrderByInput = TypedDict(
    '_ContestProblem_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ContestProblem_contestId_OrderByInput = TypedDict(
    '_ContestProblem_contestId_OrderByInput',
    {
        'contestId': 'SortOrder',
    },
    total=True
)

_ContestProblem_problemId_OrderByInput = TypedDict(
    '_ContestProblem_problemId_OrderByInput',
    {
        'problemId': 'SortOrder',
    },
    total=True
)

_ContestProblem_RelevanceInner = TypedDict(
    '_ContestProblem_RelevanceInner',
    {
        'fields': 'List[ContestProblemScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ContestProblem_RelevanceOrderByInput = TypedDict(
    '_ContestProblem_RelevanceOrderByInput',
    {
        '_relevance': '_ContestProblem_RelevanceInner',
    },
    total=True
)

ContestProblemOrderByInput = Union[
    '_ContestProblem_id_OrderByInput',
    '_ContestProblem_contestId_OrderByInput',
    '_ContestProblem_problemId_OrderByInput',
    '_ContestProblem_RelevanceOrderByInput',
]



# recursive ContestProblem types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ContestProblemRelationFilter = TypedDict(
    'ContestProblemRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ContestProblemListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ContestProblemInclude(TypedDict, total=False):
    """ContestProblem relational arguments"""
    contest: Union[bool, 'ContestArgsFromContestProblem']
    problem: Union[bool, 'ProblemArgsFromContestProblem']


    

class UserIncludeFromContestProblem(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    problems: Union[bool, 'FindManyProblemArgsFromContestProblemRecursive1']
    contests: Union[bool, 'FindManyContestArgsFromContestProblemRecursive1']
    Submission: Union[bool, 'FindManySubmissionArgsFromContestProblemRecursive1']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromContestProblemRecursive1']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestProblemRecursive1']


class UserIncludeFromContestProblemRecursive1(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    problems: Union[bool, 'FindManyProblemArgsFromContestProblemRecursive2']
    contests: Union[bool, 'FindManyContestArgsFromContestProblemRecursive2']
    Submission: Union[bool, 'FindManySubmissionArgsFromContestProblemRecursive2']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromContestProblemRecursive2']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestProblemRecursive2']


class UserIncludeFromContestProblemRecursive2(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    problems: Union[bool, 'FindManyProblemArgsFromContestProblemRecursive3']
    contests: Union[bool, 'FindManyContestArgsFromContestProblemRecursive3']
    Submission: Union[bool, 'FindManySubmissionArgsFromContestProblemRecursive3']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromContestProblemRecursive3']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestProblemRecursive3']


class UserIncludeFromContestProblemRecursive3(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    problems: Union[bool, 'FindManyProblemArgsFromContestProblemRecursive4']
    contests: Union[bool, 'FindManyContestArgsFromContestProblemRecursive4']
    Submission: Union[bool, 'FindManySubmissionArgsFromContestProblemRecursive4']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromContestProblemRecursive4']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestProblemRecursive4']


class UserIncludeFromContestProblemRecursive4(TypedDict, total=False):
    """Relational arguments for ContestProblem"""

    

class UserArgsFromContestProblem(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromContestProblemRecursive1(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromContestProblemRecursive2(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromContestProblemRecursive3(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromContestProblemRecursive4(TypedDict, total=False):
    """Arguments for ContestProblem"""
    
    

class FindManyUserArgsFromContestProblem(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromContestProblemRecursive1(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromContestProblemRecursive2(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromContestProblemRecursive3(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromContestProblemRecursive4(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProblemIncludeFromContestProblem(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    creator: Union[bool, 'UserArgsFromContestProblemRecursive1']
    submissions: Union[bool, 'FindManySubmissionArgsFromContestProblemRecursive1']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromContestProblemRecursive1']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestProblemRecursive1']


class ProblemIncludeFromContestProblemRecursive1(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    creator: Union[bool, 'UserArgsFromContestProblemRecursive2']
    submissions: Union[bool, 'FindManySubmissionArgsFromContestProblemRecursive2']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromContestProblemRecursive2']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestProblemRecursive2']


class ProblemIncludeFromContestProblemRecursive2(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    creator: Union[bool, 'UserArgsFromContestProblemRecursive3']
    submissions: Union[bool, 'FindManySubmissionArgsFromContestProblemRecursive3']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromContestProblemRecursive3']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestProblemRecursive3']


class ProblemIncludeFromContestProblemRecursive3(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    creator: Union[bool, 'UserArgsFromContestProblemRecursive4']
    submissions: Union[bool, 'FindManySubmissionArgsFromContestProblemRecursive4']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromContestProblemRecursive4']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestProblemRecursive4']


class ProblemIncludeFromContestProblemRecursive4(TypedDict, total=False):
    """Relational arguments for ContestProblem"""

    

class ProblemArgsFromContestProblem(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ProblemIncludeFromProblemRecursive1'


class ProblemArgsFromContestProblemRecursive1(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ProblemIncludeFromProblemRecursive2'


class ProblemArgsFromContestProblemRecursive2(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ProblemIncludeFromProblemRecursive3'


class ProblemArgsFromContestProblemRecursive3(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ProblemIncludeFromProblemRecursive4'


class ProblemArgsFromContestProblemRecursive4(TypedDict, total=False):
    """Arguments for ContestProblem"""
    
    

class FindManyProblemArgsFromContestProblem(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive1'


class FindManyProblemArgsFromContestProblemRecursive1(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive2'


class FindManyProblemArgsFromContestProblemRecursive2(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive3'


class FindManyProblemArgsFromContestProblemRecursive3(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive4'


class FindManyProblemArgsFromContestProblemRecursive4(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    
    

class Problem_codeIncludeFromContestProblem(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    problem: Union[bool, 'ProblemArgsFromContestProblemRecursive1']
    user: Union[bool, 'UserArgsFromContestProblemRecursive1']


class Problem_codeIncludeFromContestProblemRecursive1(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    problem: Union[bool, 'ProblemArgsFromContestProblemRecursive2']
    user: Union[bool, 'UserArgsFromContestProblemRecursive2']


class Problem_codeIncludeFromContestProblemRecursive2(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    problem: Union[bool, 'ProblemArgsFromContestProblemRecursive3']
    user: Union[bool, 'UserArgsFromContestProblemRecursive3']


class Problem_codeIncludeFromContestProblemRecursive3(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    problem: Union[bool, 'ProblemArgsFromContestProblemRecursive4']
    user: Union[bool, 'UserArgsFromContestProblemRecursive4']


class Problem_codeIncludeFromContestProblemRecursive4(TypedDict, total=False):
    """Relational arguments for ContestProblem"""

    

class Problem_codeArgsFromContestProblem(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive1'


class Problem_codeArgsFromContestProblemRecursive1(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive2'


class Problem_codeArgsFromContestProblemRecursive2(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive3'


class Problem_codeArgsFromContestProblemRecursive3(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive4'


class Problem_codeArgsFromContestProblemRecursive4(TypedDict, total=False):
    """Arguments for ContestProblem"""
    
    

class FindManyProblem_codeArgsFromContestProblem(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive1'


class FindManyProblem_codeArgsFromContestProblemRecursive1(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive2'


class FindManyProblem_codeArgsFromContestProblemRecursive2(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive3'


class FindManyProblem_codeArgsFromContestProblemRecursive3(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive4'


class FindManyProblem_codeArgsFromContestProblemRecursive4(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    
    

class SubmissionIncludeFromContestProblem(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    user: Union[bool, 'UserArgsFromContestProblemRecursive1']
    problem: Union[bool, 'ProblemArgsFromContestProblemRecursive1']


class SubmissionIncludeFromContestProblemRecursive1(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    user: Union[bool, 'UserArgsFromContestProblemRecursive2']
    problem: Union[bool, 'ProblemArgsFromContestProblemRecursive2']


class SubmissionIncludeFromContestProblemRecursive2(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    user: Union[bool, 'UserArgsFromContestProblemRecursive3']
    problem: Union[bool, 'ProblemArgsFromContestProblemRecursive3']


class SubmissionIncludeFromContestProblemRecursive3(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    user: Union[bool, 'UserArgsFromContestProblemRecursive4']
    problem: Union[bool, 'ProblemArgsFromContestProblemRecursive4']


class SubmissionIncludeFromContestProblemRecursive4(TypedDict, total=False):
    """Relational arguments for ContestProblem"""

    

class SubmissionArgsFromContestProblem(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class SubmissionArgsFromContestProblemRecursive1(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class SubmissionArgsFromContestProblemRecursive2(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class SubmissionArgsFromContestProblemRecursive3(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class SubmissionArgsFromContestProblemRecursive4(TypedDict, total=False):
    """Arguments for ContestProblem"""
    
    

class FindManySubmissionArgsFromContestProblem(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class FindManySubmissionArgsFromContestProblemRecursive1(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class FindManySubmissionArgsFromContestProblemRecursive2(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class FindManySubmissionArgsFromContestProblemRecursive3(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class FindManySubmissionArgsFromContestProblemRecursive4(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    
    

class ContestIncludeFromContestProblem(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    creator: Union[bool, 'UserArgsFromContestProblemRecursive1']
    problems: Union[bool, 'FindManyContestProblemArgsFromContestProblemRecursive1']
    participants: Union[bool, 'FindManyContestParticipantArgsFromContestProblemRecursive1']


class ContestIncludeFromContestProblemRecursive1(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    creator: Union[bool, 'UserArgsFromContestProblemRecursive2']
    problems: Union[bool, 'FindManyContestProblemArgsFromContestProblemRecursive2']
    participants: Union[bool, 'FindManyContestParticipantArgsFromContestProblemRecursive2']


class ContestIncludeFromContestProblemRecursive2(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    creator: Union[bool, 'UserArgsFromContestProblemRecursive3']
    problems: Union[bool, 'FindManyContestProblemArgsFromContestProblemRecursive3']
    participants: Union[bool, 'FindManyContestParticipantArgsFromContestProblemRecursive3']


class ContestIncludeFromContestProblemRecursive3(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    creator: Union[bool, 'UserArgsFromContestProblemRecursive4']
    problems: Union[bool, 'FindManyContestProblemArgsFromContestProblemRecursive4']
    participants: Union[bool, 'FindManyContestParticipantArgsFromContestProblemRecursive4']


class ContestIncludeFromContestProblemRecursive4(TypedDict, total=False):
    """Relational arguments for ContestProblem"""

    

class ContestArgsFromContestProblem(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ContestIncludeFromContestRecursive1'


class ContestArgsFromContestProblemRecursive1(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ContestIncludeFromContestRecursive2'


class ContestArgsFromContestProblemRecursive2(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ContestIncludeFromContestRecursive3'


class ContestArgsFromContestProblemRecursive3(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ContestIncludeFromContestRecursive4'


class ContestArgsFromContestProblemRecursive4(TypedDict, total=False):
    """Arguments for ContestProblem"""
    
    

class FindManyContestArgsFromContestProblem(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive1'


class FindManyContestArgsFromContestProblemRecursive1(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive2'


class FindManyContestArgsFromContestProblemRecursive2(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive3'


class FindManyContestArgsFromContestProblemRecursive3(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive4'


class FindManyContestArgsFromContestProblemRecursive4(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    
    

class ContestProblemIncludeFromContestProblem(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    contest: Union[bool, 'ContestArgsFromContestProblemRecursive1']
    problem: Union[bool, 'ProblemArgsFromContestProblemRecursive1']


class ContestProblemIncludeFromContestProblemRecursive1(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    contest: Union[bool, 'ContestArgsFromContestProblemRecursive2']
    problem: Union[bool, 'ProblemArgsFromContestProblemRecursive2']


class ContestProblemIncludeFromContestProblemRecursive2(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    contest: Union[bool, 'ContestArgsFromContestProblemRecursive3']
    problem: Union[bool, 'ProblemArgsFromContestProblemRecursive3']


class ContestProblemIncludeFromContestProblemRecursive3(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    contest: Union[bool, 'ContestArgsFromContestProblemRecursive4']
    problem: Union[bool, 'ProblemArgsFromContestProblemRecursive4']


class ContestProblemIncludeFromContestProblemRecursive4(TypedDict, total=False):
    """Relational arguments for ContestProblem"""

    

class ContestProblemArgsFromContestProblem(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ContestProblemIncludeFromContestProblemRecursive1'


class ContestProblemArgsFromContestProblemRecursive1(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ContestProblemIncludeFromContestProblemRecursive2'


class ContestProblemArgsFromContestProblemRecursive2(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ContestProblemIncludeFromContestProblemRecursive3'


class ContestProblemArgsFromContestProblemRecursive3(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ContestProblemIncludeFromContestProblemRecursive4'


class ContestProblemArgsFromContestProblemRecursive4(TypedDict, total=False):
    """Arguments for ContestProblem"""
    
    

class FindManyContestProblemArgsFromContestProblem(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive1'


class FindManyContestProblemArgsFromContestProblemRecursive1(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive2'


class FindManyContestProblemArgsFromContestProblemRecursive2(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive3'


class FindManyContestProblemArgsFromContestProblemRecursive3(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive4'


class FindManyContestProblemArgsFromContestProblemRecursive4(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    
    

class ContestParticipantIncludeFromContestProblem(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    contest: Union[bool, 'ContestArgsFromContestProblemRecursive1']
    user: Union[bool, 'UserArgsFromContestProblemRecursive1']


class ContestParticipantIncludeFromContestProblemRecursive1(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    contest: Union[bool, 'ContestArgsFromContestProblemRecursive2']
    user: Union[bool, 'UserArgsFromContestProblemRecursive2']


class ContestParticipantIncludeFromContestProblemRecursive2(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    contest: Union[bool, 'ContestArgsFromContestProblemRecursive3']
    user: Union[bool, 'UserArgsFromContestProblemRecursive3']


class ContestParticipantIncludeFromContestProblemRecursive3(TypedDict, total=False):
    """Relational arguments for ContestProblem"""
    contest: Union[bool, 'ContestArgsFromContestProblemRecursive4']
    user: Union[bool, 'UserArgsFromContestProblemRecursive4']


class ContestParticipantIncludeFromContestProblemRecursive4(TypedDict, total=False):
    """Relational arguments for ContestProblem"""

    

class ContestParticipantArgsFromContestProblem(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive1'


class ContestParticipantArgsFromContestProblemRecursive1(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive2'


class ContestParticipantArgsFromContestProblemRecursive2(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive3'


class ContestParticipantArgsFromContestProblemRecursive3(TypedDict, total=False):
    """Arguments for ContestProblem"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive4'


class ContestParticipantArgsFromContestProblemRecursive4(TypedDict, total=False):
    """Arguments for ContestProblem"""
    
    

class FindManyContestParticipantArgsFromContestProblem(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive1'


class FindManyContestParticipantArgsFromContestProblemRecursive1(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive2'


class FindManyContestParticipantArgsFromContestProblemRecursive2(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive3'


class FindManyContestParticipantArgsFromContestProblemRecursive3(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive4'


class FindManyContestParticipantArgsFromContestProblemRecursive4(TypedDict, total=False):
    """Arguments for ContestProblem"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    


FindManyContestProblemArgs = FindManyContestProblemArgsFromContestProblem
FindFirstContestProblemArgs = FindManyContestProblemArgsFromContestProblem


    

class ContestProblemWhereInput(TypedDict, total=False):
    """ContestProblem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    contest: 'ContestRelationFilter'
    contestId: Union[_int, 'types.IntFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ContestProblemWhereInputRecursive1', List['ContestProblemWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ContestProblemWhereInputRecursive1']
    OR: List['ContestProblemWhereInputRecursive1']
    NOT: List['ContestProblemWhereInputRecursive1']


class ContestProblemWhereInputRecursive1(TypedDict, total=False):
    """ContestProblem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    contest: 'ContestRelationFilter'
    contestId: Union[_int, 'types.IntFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ContestProblemWhereInputRecursive2', List['ContestProblemWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ContestProblemWhereInputRecursive2']
    OR: List['ContestProblemWhereInputRecursive2']
    NOT: List['ContestProblemWhereInputRecursive2']


class ContestProblemWhereInputRecursive2(TypedDict, total=False):
    """ContestProblem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    contest: 'ContestRelationFilter'
    contestId: Union[_int, 'types.IntFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ContestProblemWhereInputRecursive3', List['ContestProblemWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ContestProblemWhereInputRecursive3']
    OR: List['ContestProblemWhereInputRecursive3']
    NOT: List['ContestProblemWhereInputRecursive3']


class ContestProblemWhereInputRecursive3(TypedDict, total=False):
    """ContestProblem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    contest: 'ContestRelationFilter'
    contestId: Union[_int, 'types.IntFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ContestProblemWhereInputRecursive4', List['ContestProblemWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ContestProblemWhereInputRecursive4']
    OR: List['ContestProblemWhereInputRecursive4']
    NOT: List['ContestProblemWhereInputRecursive4']


class ContestProblemWhereInputRecursive4(TypedDict, total=False):
    """ContestProblem arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    contest: 'ContestRelationFilter'
    contestId: Union[_int, 'types.IntFilter']
    problem: 'ProblemRelationFilter'
    problemId: Union[_int, 'types.IntFilter']



# aggregate ContestProblem types


    

class ContestProblemScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ContestProblem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    contestId: Union[_int, 'types.IntWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ContestProblemScalarWhereWithAggregatesInputRecursive1']
    OR: List['ContestProblemScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ContestProblemScalarWhereWithAggregatesInputRecursive1']


class ContestProblemScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ContestProblem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    contestId: Union[_int, 'types.IntWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ContestProblemScalarWhereWithAggregatesInputRecursive2']
    OR: List['ContestProblemScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ContestProblemScalarWhereWithAggregatesInputRecursive2']


class ContestProblemScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ContestProblem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    contestId: Union[_int, 'types.IntWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ContestProblemScalarWhereWithAggregatesInputRecursive3']
    OR: List['ContestProblemScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ContestProblemScalarWhereWithAggregatesInputRecursive3']


class ContestProblemScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ContestProblem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    contestId: Union[_int, 'types.IntWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ContestProblemScalarWhereWithAggregatesInputRecursive4']
    OR: List['ContestProblemScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ContestProblemScalarWhereWithAggregatesInputRecursive4']


class ContestProblemScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ContestProblem arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    contestId: Union[_int, 'types.IntWithAggregatesFilter']
    problemId: Union[_int, 'types.IntWithAggregatesFilter']



class ContestProblemGroupByOutput(TypedDict, total=False):
    id: _int
    contestId: _int
    problemId: _int
    _sum: 'ContestProblemSumAggregateOutput'
    _avg: 'ContestProblemAvgAggregateOutput'
    _min: 'ContestProblemMinAggregateOutput'
    _max: 'ContestProblemMaxAggregateOutput'
    _count: 'ContestProblemCountAggregateOutput'


class ContestProblemAvgAggregateOutput(TypedDict, total=False):
    """ContestProblem output for aggregating averages"""
    id: float
    contestId: float
    problemId: float


class ContestProblemSumAggregateOutput(TypedDict, total=False):
    """ContestProblem output for aggregating sums"""
    id: _int
    contestId: _int
    problemId: _int


class ContestProblemScalarAggregateOutput(TypedDict, total=False):
    """ContestProblem output including scalar fields"""
    id: _int
    contestId: _int
    problemId: _int


ContestProblemMinAggregateOutput = ContestProblemScalarAggregateOutput
ContestProblemMaxAggregateOutput = ContestProblemScalarAggregateOutput


class ContestProblemMaxAggregateInput(TypedDict, total=False):
    """ContestProblem input for aggregating by max"""
    id: bool
    contestId: bool
    problemId: bool


class ContestProblemMinAggregateInput(TypedDict, total=False):
    """ContestProblem input for aggregating by min"""
    id: bool
    contestId: bool
    problemId: bool


class ContestProblemNumberAggregateInput(TypedDict, total=False):
    """ContestProblem input for aggregating numbers"""
    id: bool
    contestId: bool
    problemId: bool


ContestProblemAvgAggregateInput = ContestProblemNumberAggregateInput
ContestProblemSumAggregateInput = ContestProblemNumberAggregateInput


ContestProblemCountAggregateInput = TypedDict(
    'ContestProblemCountAggregateInput',
    {
        'id': bool,
        'contestId': bool,
        'problemId': bool,
        '_all': bool,
    },
    total=False,
)

ContestProblemCountAggregateOutput = TypedDict(
    'ContestProblemCountAggregateOutput',
    {
        'id': int,
        'contestId': int,
        'problemId': int,
        '_all': int,
    },
    total=False,
)


ContestProblemKeys = Literal[
    'id',
    'contest',
    'contestId',
    'problem',
    'problemId',
]
ContestProblemScalarFieldKeys = Literal[
    'id',
    'contestId',
    'problemId',
]
ContestProblemScalarFieldKeysT = TypeVar('ContestProblemScalarFieldKeysT', bound=ContestProblemScalarFieldKeys)

ContestProblemRelationalFieldKeys = Literal[
        'contest',
        'problem',
    ]

# ContestParticipant types

class ContestParticipantOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ContestParticipant create method"""
    id: _int
    contest: 'ContestCreateNestedWithoutRelationsInput'
    contestId: _int
    user: 'UserCreateNestedWithoutRelationsInput'
    userId: _int
    rank: Optional[_int]


class ContestParticipantCreateInput(ContestParticipantOptionalCreateInput):
    """Required arguments to the ContestParticipant create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ContestParticipantOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ContestParticipant create method, without relations"""
    id: _int
    contestId: _int
    userId: _int
    rank: Optional[_int]


class ContestParticipantCreateWithoutRelationsInput(ContestParticipantOptionalCreateWithoutRelationsInput):
    """Required arguments to the ContestParticipant create method, without relations"""

class ContestParticipantConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ContestParticipantCreateWithoutRelationsInput'
    where: 'ContestParticipantWhereUniqueInput'

class ContestParticipantCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ContestParticipantCreateWithoutRelationsInput'
    connect: 'ContestParticipantWhereUniqueInput'
    connect_or_create: 'ContestParticipantConnectOrCreateWithoutRelationsInput'


class ContestParticipantCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ContestParticipantCreateWithoutRelationsInput', List['ContestParticipantCreateWithoutRelationsInput']]
    connect: Union['ContestParticipantWhereUniqueInput', List['ContestParticipantWhereUniqueInput']]
    connect_or_create: Union['ContestParticipantConnectOrCreateWithoutRelationsInput', List['ContestParticipantConnectOrCreateWithoutRelationsInput']]

_ContestParticipantWhereUnique_id_Input = TypedDict(
    '_ContestParticipantWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ContestParticipantWhereUniqueInput = _ContestParticipantWhereUnique_id_Input


class ContestParticipantUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    contest: 'ContestUpdateOneWithoutRelationsInput'
    user: 'UserUpdateOneWithoutRelationsInput'
    rank: Optional[Union[AtomicIntInput, _int]]


class ContestParticipantUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    rank: Optional[Union[AtomicIntInput, _int]]


class ContestParticipantUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ContestParticipantCreateWithoutRelationsInput']
    connect: List['ContestParticipantWhereUniqueInput']
    connect_or_create: List['ContestParticipantConnectOrCreateWithoutRelationsInput']
    set: List['ContestParticipantWhereUniqueInput']
    disconnect: List['ContestParticipantWhereUniqueInput']
    delete: List['ContestParticipantWhereUniqueInput']

    # TODO
    # update: List['ContestParticipantUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ContestParticipantUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ContestParticipantScalarWhereInput']
    # upsert: List['ContestParticipantUpserteWithWhereUniqueWithoutRelationsInput']


class ContestParticipantUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ContestParticipantCreateWithoutRelationsInput'
    connect: 'ContestParticipantWhereUniqueInput'
    connect_or_create: 'ContestParticipantConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ContestParticipantUpdateInput'
    # upsert: 'ContestParticipantUpsertWithoutRelationsInput'


class ContestParticipantUpsertInput(TypedDict):
    create: 'ContestParticipantCreateInput'
    update: 'ContestParticipantUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ContestParticipant_id_OrderByInput = TypedDict(
    '_ContestParticipant_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ContestParticipant_contestId_OrderByInput = TypedDict(
    '_ContestParticipant_contestId_OrderByInput',
    {
        'contestId': 'SortOrder',
    },
    total=True
)

_ContestParticipant_userId_OrderByInput = TypedDict(
    '_ContestParticipant_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_ContestParticipant_rank_OrderByInput = TypedDict(
    '_ContestParticipant_rank_OrderByInput',
    {
        'rank': 'SortOrder',
    },
    total=True
)

_ContestParticipant_RelevanceInner = TypedDict(
    '_ContestParticipant_RelevanceInner',
    {
        'fields': 'List[ContestParticipantScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ContestParticipant_RelevanceOrderByInput = TypedDict(
    '_ContestParticipant_RelevanceOrderByInput',
    {
        '_relevance': '_ContestParticipant_RelevanceInner',
    },
    total=True
)

ContestParticipantOrderByInput = Union[
    '_ContestParticipant_id_OrderByInput',
    '_ContestParticipant_contestId_OrderByInput',
    '_ContestParticipant_userId_OrderByInput',
    '_ContestParticipant_rank_OrderByInput',
    '_ContestParticipant_RelevanceOrderByInput',
]



# recursive ContestParticipant types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ContestParticipantRelationFilter = TypedDict(
    'ContestParticipantRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ContestParticipantListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ContestParticipantInclude(TypedDict, total=False):
    """ContestParticipant relational arguments"""
    contest: Union[bool, 'ContestArgsFromContestParticipant']
    user: Union[bool, 'UserArgsFromContestParticipant']


    

class UserIncludeFromContestParticipant(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    problems: Union[bool, 'FindManyProblemArgsFromContestParticipantRecursive1']
    contests: Union[bool, 'FindManyContestArgsFromContestParticipantRecursive1']
    Submission: Union[bool, 'FindManySubmissionArgsFromContestParticipantRecursive1']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromContestParticipantRecursive1']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestParticipantRecursive1']


class UserIncludeFromContestParticipantRecursive1(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    problems: Union[bool, 'FindManyProblemArgsFromContestParticipantRecursive2']
    contests: Union[bool, 'FindManyContestArgsFromContestParticipantRecursive2']
    Submission: Union[bool, 'FindManySubmissionArgsFromContestParticipantRecursive2']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromContestParticipantRecursive2']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestParticipantRecursive2']


class UserIncludeFromContestParticipantRecursive2(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    problems: Union[bool, 'FindManyProblemArgsFromContestParticipantRecursive3']
    contests: Union[bool, 'FindManyContestArgsFromContestParticipantRecursive3']
    Submission: Union[bool, 'FindManySubmissionArgsFromContestParticipantRecursive3']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromContestParticipantRecursive3']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestParticipantRecursive3']


class UserIncludeFromContestParticipantRecursive3(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    problems: Union[bool, 'FindManyProblemArgsFromContestParticipantRecursive4']
    contests: Union[bool, 'FindManyContestArgsFromContestParticipantRecursive4']
    Submission: Union[bool, 'FindManySubmissionArgsFromContestParticipantRecursive4']
    ContestParticipant: Union[bool, 'FindManyContestParticipantArgsFromContestParticipantRecursive4']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestParticipantRecursive4']


class UserIncludeFromContestParticipantRecursive4(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""

    

class UserArgsFromContestParticipant(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromContestParticipantRecursive1(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromContestParticipantRecursive2(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromContestParticipantRecursive3(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromContestParticipantRecursive4(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    
    

class FindManyUserArgsFromContestParticipant(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromContestParticipantRecursive1(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromContestParticipantRecursive2(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromContestParticipantRecursive3(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromContestParticipantRecursive4(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ProblemIncludeFromContestParticipant(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    creator: Union[bool, 'UserArgsFromContestParticipantRecursive1']
    submissions: Union[bool, 'FindManySubmissionArgsFromContestParticipantRecursive1']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromContestParticipantRecursive1']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestParticipantRecursive1']


class ProblemIncludeFromContestParticipantRecursive1(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    creator: Union[bool, 'UserArgsFromContestParticipantRecursive2']
    submissions: Union[bool, 'FindManySubmissionArgsFromContestParticipantRecursive2']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromContestParticipantRecursive2']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestParticipantRecursive2']


class ProblemIncludeFromContestParticipantRecursive2(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    creator: Union[bool, 'UserArgsFromContestParticipantRecursive3']
    submissions: Union[bool, 'FindManySubmissionArgsFromContestParticipantRecursive3']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromContestParticipantRecursive3']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestParticipantRecursive3']


class ProblemIncludeFromContestParticipantRecursive3(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    creator: Union[bool, 'UserArgsFromContestParticipantRecursive4']
    submissions: Union[bool, 'FindManySubmissionArgsFromContestParticipantRecursive4']
    ContestProblem: Union[bool, 'FindManyContestProblemArgsFromContestParticipantRecursive4']
    Problem_code: Union[bool, 'FindManyProblem_codeArgsFromContestParticipantRecursive4']


class ProblemIncludeFromContestParticipantRecursive4(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""

    

class ProblemArgsFromContestParticipant(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ProblemIncludeFromProblemRecursive1'


class ProblemArgsFromContestParticipantRecursive1(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ProblemIncludeFromProblemRecursive2'


class ProblemArgsFromContestParticipantRecursive2(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ProblemIncludeFromProblemRecursive3'


class ProblemArgsFromContestParticipantRecursive3(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ProblemIncludeFromProblemRecursive4'


class ProblemArgsFromContestParticipantRecursive4(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    
    

class FindManyProblemArgsFromContestParticipant(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive1'


class FindManyProblemArgsFromContestParticipantRecursive1(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive2'


class FindManyProblemArgsFromContestParticipantRecursive2(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive3'


class FindManyProblemArgsFromContestParticipantRecursive3(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    include: 'ProblemIncludeFromProblemRecursive4'


class FindManyProblemArgsFromContestParticipantRecursive4(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ProblemOrderByInput', List['ProblemOrderByInput']]
    where: 'ProblemWhereInput'
    cursor: 'ProblemWhereUniqueInput'
    distinct: List['ProblemScalarFieldKeys']
    
    

class Problem_codeIncludeFromContestParticipant(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    problem: Union[bool, 'ProblemArgsFromContestParticipantRecursive1']
    user: Union[bool, 'UserArgsFromContestParticipantRecursive1']


class Problem_codeIncludeFromContestParticipantRecursive1(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    problem: Union[bool, 'ProblemArgsFromContestParticipantRecursive2']
    user: Union[bool, 'UserArgsFromContestParticipantRecursive2']


class Problem_codeIncludeFromContestParticipantRecursive2(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    problem: Union[bool, 'ProblemArgsFromContestParticipantRecursive3']
    user: Union[bool, 'UserArgsFromContestParticipantRecursive3']


class Problem_codeIncludeFromContestParticipantRecursive3(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    problem: Union[bool, 'ProblemArgsFromContestParticipantRecursive4']
    user: Union[bool, 'UserArgsFromContestParticipantRecursive4']


class Problem_codeIncludeFromContestParticipantRecursive4(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""

    

class Problem_codeArgsFromContestParticipant(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive1'


class Problem_codeArgsFromContestParticipantRecursive1(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive2'


class Problem_codeArgsFromContestParticipantRecursive2(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive3'


class Problem_codeArgsFromContestParticipantRecursive3(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'Problem_codeIncludeFromProblem_codeRecursive4'


class Problem_codeArgsFromContestParticipantRecursive4(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    
    

class FindManyProblem_codeArgsFromContestParticipant(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive1'


class FindManyProblem_codeArgsFromContestParticipantRecursive1(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive2'


class FindManyProblem_codeArgsFromContestParticipantRecursive2(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive3'


class FindManyProblem_codeArgsFromContestParticipantRecursive3(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    include: 'Problem_codeIncludeFromProblem_codeRecursive4'


class FindManyProblem_codeArgsFromContestParticipantRecursive4(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['Problem_codeOrderByInput', List['Problem_codeOrderByInput']]
    where: 'Problem_codeWhereInput'
    cursor: 'Problem_codeWhereUniqueInput'
    distinct: List['Problem_codeScalarFieldKeys']
    
    

class SubmissionIncludeFromContestParticipant(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    user: Union[bool, 'UserArgsFromContestParticipantRecursive1']
    problem: Union[bool, 'ProblemArgsFromContestParticipantRecursive1']


class SubmissionIncludeFromContestParticipantRecursive1(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    user: Union[bool, 'UserArgsFromContestParticipantRecursive2']
    problem: Union[bool, 'ProblemArgsFromContestParticipantRecursive2']


class SubmissionIncludeFromContestParticipantRecursive2(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    user: Union[bool, 'UserArgsFromContestParticipantRecursive3']
    problem: Union[bool, 'ProblemArgsFromContestParticipantRecursive3']


class SubmissionIncludeFromContestParticipantRecursive3(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    user: Union[bool, 'UserArgsFromContestParticipantRecursive4']
    problem: Union[bool, 'ProblemArgsFromContestParticipantRecursive4']


class SubmissionIncludeFromContestParticipantRecursive4(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""

    

class SubmissionArgsFromContestParticipant(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class SubmissionArgsFromContestParticipantRecursive1(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class SubmissionArgsFromContestParticipantRecursive2(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class SubmissionArgsFromContestParticipantRecursive3(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class SubmissionArgsFromContestParticipantRecursive4(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    
    

class FindManySubmissionArgsFromContestParticipant(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive1'


class FindManySubmissionArgsFromContestParticipantRecursive1(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive2'


class FindManySubmissionArgsFromContestParticipantRecursive2(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive3'


class FindManySubmissionArgsFromContestParticipantRecursive3(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    include: 'SubmissionIncludeFromSubmissionRecursive4'


class FindManySubmissionArgsFromContestParticipantRecursive4(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['SubmissionOrderByInput', List['SubmissionOrderByInput']]
    where: 'SubmissionWhereInput'
    cursor: 'SubmissionWhereUniqueInput'
    distinct: List['SubmissionScalarFieldKeys']
    
    

class ContestIncludeFromContestParticipant(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    creator: Union[bool, 'UserArgsFromContestParticipantRecursive1']
    problems: Union[bool, 'FindManyContestProblemArgsFromContestParticipantRecursive1']
    participants: Union[bool, 'FindManyContestParticipantArgsFromContestParticipantRecursive1']


class ContestIncludeFromContestParticipantRecursive1(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    creator: Union[bool, 'UserArgsFromContestParticipantRecursive2']
    problems: Union[bool, 'FindManyContestProblemArgsFromContestParticipantRecursive2']
    participants: Union[bool, 'FindManyContestParticipantArgsFromContestParticipantRecursive2']


class ContestIncludeFromContestParticipantRecursive2(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    creator: Union[bool, 'UserArgsFromContestParticipantRecursive3']
    problems: Union[bool, 'FindManyContestProblemArgsFromContestParticipantRecursive3']
    participants: Union[bool, 'FindManyContestParticipantArgsFromContestParticipantRecursive3']


class ContestIncludeFromContestParticipantRecursive3(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    creator: Union[bool, 'UserArgsFromContestParticipantRecursive4']
    problems: Union[bool, 'FindManyContestProblemArgsFromContestParticipantRecursive4']
    participants: Union[bool, 'FindManyContestParticipantArgsFromContestParticipantRecursive4']


class ContestIncludeFromContestParticipantRecursive4(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""

    

class ContestArgsFromContestParticipant(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ContestIncludeFromContestRecursive1'


class ContestArgsFromContestParticipantRecursive1(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ContestIncludeFromContestRecursive2'


class ContestArgsFromContestParticipantRecursive2(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ContestIncludeFromContestRecursive3'


class ContestArgsFromContestParticipantRecursive3(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ContestIncludeFromContestRecursive4'


class ContestArgsFromContestParticipantRecursive4(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    
    

class FindManyContestArgsFromContestParticipant(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive1'


class FindManyContestArgsFromContestParticipantRecursive1(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive2'


class FindManyContestArgsFromContestParticipantRecursive2(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive3'


class FindManyContestArgsFromContestParticipantRecursive3(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    include: 'ContestIncludeFromContestRecursive4'


class FindManyContestArgsFromContestParticipantRecursive4(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestOrderByInput', List['ContestOrderByInput']]
    where: 'ContestWhereInput'
    cursor: 'ContestWhereUniqueInput'
    distinct: List['ContestScalarFieldKeys']
    
    

class ContestProblemIncludeFromContestParticipant(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    contest: Union[bool, 'ContestArgsFromContestParticipantRecursive1']
    problem: Union[bool, 'ProblemArgsFromContestParticipantRecursive1']


class ContestProblemIncludeFromContestParticipantRecursive1(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    contest: Union[bool, 'ContestArgsFromContestParticipantRecursive2']
    problem: Union[bool, 'ProblemArgsFromContestParticipantRecursive2']


class ContestProblemIncludeFromContestParticipantRecursive2(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    contest: Union[bool, 'ContestArgsFromContestParticipantRecursive3']
    problem: Union[bool, 'ProblemArgsFromContestParticipantRecursive3']


class ContestProblemIncludeFromContestParticipantRecursive3(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    contest: Union[bool, 'ContestArgsFromContestParticipantRecursive4']
    problem: Union[bool, 'ProblemArgsFromContestParticipantRecursive4']


class ContestProblemIncludeFromContestParticipantRecursive4(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""

    

class ContestProblemArgsFromContestParticipant(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ContestProblemIncludeFromContestProblemRecursive1'


class ContestProblemArgsFromContestParticipantRecursive1(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ContestProblemIncludeFromContestProblemRecursive2'


class ContestProblemArgsFromContestParticipantRecursive2(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ContestProblemIncludeFromContestProblemRecursive3'


class ContestProblemArgsFromContestParticipantRecursive3(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ContestProblemIncludeFromContestProblemRecursive4'


class ContestProblemArgsFromContestParticipantRecursive4(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    
    

class FindManyContestProblemArgsFromContestParticipant(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive1'


class FindManyContestProblemArgsFromContestParticipantRecursive1(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive2'


class FindManyContestProblemArgsFromContestParticipantRecursive2(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive3'


class FindManyContestProblemArgsFromContestParticipantRecursive3(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    include: 'ContestProblemIncludeFromContestProblemRecursive4'


class FindManyContestProblemArgsFromContestParticipantRecursive4(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestProblemOrderByInput', List['ContestProblemOrderByInput']]
    where: 'ContestProblemWhereInput'
    cursor: 'ContestProblemWhereUniqueInput'
    distinct: List['ContestProblemScalarFieldKeys']
    
    

class ContestParticipantIncludeFromContestParticipant(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    contest: Union[bool, 'ContestArgsFromContestParticipantRecursive1']
    user: Union[bool, 'UserArgsFromContestParticipantRecursive1']


class ContestParticipantIncludeFromContestParticipantRecursive1(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    contest: Union[bool, 'ContestArgsFromContestParticipantRecursive2']
    user: Union[bool, 'UserArgsFromContestParticipantRecursive2']


class ContestParticipantIncludeFromContestParticipantRecursive2(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    contest: Union[bool, 'ContestArgsFromContestParticipantRecursive3']
    user: Union[bool, 'UserArgsFromContestParticipantRecursive3']


class ContestParticipantIncludeFromContestParticipantRecursive3(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""
    contest: Union[bool, 'ContestArgsFromContestParticipantRecursive4']
    user: Union[bool, 'UserArgsFromContestParticipantRecursive4']


class ContestParticipantIncludeFromContestParticipantRecursive4(TypedDict, total=False):
    """Relational arguments for ContestParticipant"""

    

class ContestParticipantArgsFromContestParticipant(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive1'


class ContestParticipantArgsFromContestParticipantRecursive1(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive2'


class ContestParticipantArgsFromContestParticipantRecursive2(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive3'


class ContestParticipantArgsFromContestParticipantRecursive3(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    include: 'ContestParticipantIncludeFromContestParticipantRecursive4'


class ContestParticipantArgsFromContestParticipantRecursive4(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    
    

class FindManyContestParticipantArgsFromContestParticipant(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive1'


class FindManyContestParticipantArgsFromContestParticipantRecursive1(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive2'


class FindManyContestParticipantArgsFromContestParticipantRecursive2(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive3'


class FindManyContestParticipantArgsFromContestParticipantRecursive3(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    include: 'ContestParticipantIncludeFromContestParticipantRecursive4'


class FindManyContestParticipantArgsFromContestParticipantRecursive4(TypedDict, total=False):
    """Arguments for ContestParticipant"""
    take: int
    skip: int
    order_by: Union['ContestParticipantOrderByInput', List['ContestParticipantOrderByInput']]
    where: 'ContestParticipantWhereInput'
    cursor: 'ContestParticipantWhereUniqueInput'
    distinct: List['ContestParticipantScalarFieldKeys']
    


FindManyContestParticipantArgs = FindManyContestParticipantArgsFromContestParticipant
FindFirstContestParticipantArgs = FindManyContestParticipantArgsFromContestParticipant


    

class ContestParticipantWhereInput(TypedDict, total=False):
    """ContestParticipant arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    contest: 'ContestRelationFilter'
    contestId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    rank: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ContestParticipantWhereInputRecursive1', List['ContestParticipantWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ContestParticipantWhereInputRecursive1']
    OR: List['ContestParticipantWhereInputRecursive1']
    NOT: List['ContestParticipantWhereInputRecursive1']


class ContestParticipantWhereInputRecursive1(TypedDict, total=False):
    """ContestParticipant arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    contest: 'ContestRelationFilter'
    contestId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    rank: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ContestParticipantWhereInputRecursive2', List['ContestParticipantWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ContestParticipantWhereInputRecursive2']
    OR: List['ContestParticipantWhereInputRecursive2']
    NOT: List['ContestParticipantWhereInputRecursive2']


class ContestParticipantWhereInputRecursive2(TypedDict, total=False):
    """ContestParticipant arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    contest: 'ContestRelationFilter'
    contestId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    rank: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ContestParticipantWhereInputRecursive3', List['ContestParticipantWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ContestParticipantWhereInputRecursive3']
    OR: List['ContestParticipantWhereInputRecursive3']
    NOT: List['ContestParticipantWhereInputRecursive3']


class ContestParticipantWhereInputRecursive3(TypedDict, total=False):
    """ContestParticipant arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    contest: 'ContestRelationFilter'
    contestId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    rank: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ContestParticipantWhereInputRecursive4', List['ContestParticipantWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ContestParticipantWhereInputRecursive4']
    OR: List['ContestParticipantWhereInputRecursive4']
    NOT: List['ContestParticipantWhereInputRecursive4']


class ContestParticipantWhereInputRecursive4(TypedDict, total=False):
    """ContestParticipant arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    contest: 'ContestRelationFilter'
    contestId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    rank: Union[None, _int, 'types.IntFilter']



# aggregate ContestParticipant types


    

class ContestParticipantScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ContestParticipant arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    contestId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    rank: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ContestParticipantScalarWhereWithAggregatesInputRecursive1']
    OR: List['ContestParticipantScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ContestParticipantScalarWhereWithAggregatesInputRecursive1']


class ContestParticipantScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ContestParticipant arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    contestId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    rank: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ContestParticipantScalarWhereWithAggregatesInputRecursive2']
    OR: List['ContestParticipantScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ContestParticipantScalarWhereWithAggregatesInputRecursive2']


class ContestParticipantScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ContestParticipant arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    contestId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    rank: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ContestParticipantScalarWhereWithAggregatesInputRecursive3']
    OR: List['ContestParticipantScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ContestParticipantScalarWhereWithAggregatesInputRecursive3']


class ContestParticipantScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ContestParticipant arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    contestId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    rank: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ContestParticipantScalarWhereWithAggregatesInputRecursive4']
    OR: List['ContestParticipantScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ContestParticipantScalarWhereWithAggregatesInputRecursive4']


class ContestParticipantScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ContestParticipant arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    contestId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    rank: Union[_int, 'types.IntWithAggregatesFilter']



class ContestParticipantGroupByOutput(TypedDict, total=False):
    id: _int
    contestId: _int
    userId: _int
    rank: _int
    _sum: 'ContestParticipantSumAggregateOutput'
    _avg: 'ContestParticipantAvgAggregateOutput'
    _min: 'ContestParticipantMinAggregateOutput'
    _max: 'ContestParticipantMaxAggregateOutput'
    _count: 'ContestParticipantCountAggregateOutput'


class ContestParticipantAvgAggregateOutput(TypedDict, total=False):
    """ContestParticipant output for aggregating averages"""
    id: float
    contestId: float
    userId: float
    rank: float


class ContestParticipantSumAggregateOutput(TypedDict, total=False):
    """ContestParticipant output for aggregating sums"""
    id: _int
    contestId: _int
    userId: _int
    rank: _int


class ContestParticipantScalarAggregateOutput(TypedDict, total=False):
    """ContestParticipant output including scalar fields"""
    id: _int
    contestId: _int
    userId: _int
    rank: _int


ContestParticipantMinAggregateOutput = ContestParticipantScalarAggregateOutput
ContestParticipantMaxAggregateOutput = ContestParticipantScalarAggregateOutput


class ContestParticipantMaxAggregateInput(TypedDict, total=False):
    """ContestParticipant input for aggregating by max"""
    id: bool
    contestId: bool
    userId: bool
    rank: bool


class ContestParticipantMinAggregateInput(TypedDict, total=False):
    """ContestParticipant input for aggregating by min"""
    id: bool
    contestId: bool
    userId: bool
    rank: bool


class ContestParticipantNumberAggregateInput(TypedDict, total=False):
    """ContestParticipant input for aggregating numbers"""
    id: bool
    contestId: bool
    userId: bool
    rank: bool


ContestParticipantAvgAggregateInput = ContestParticipantNumberAggregateInput
ContestParticipantSumAggregateInput = ContestParticipantNumberAggregateInput


ContestParticipantCountAggregateInput = TypedDict(
    'ContestParticipantCountAggregateInput',
    {
        'id': bool,
        'contestId': bool,
        'userId': bool,
        'rank': bool,
        '_all': bool,
    },
    total=False,
)

ContestParticipantCountAggregateOutput = TypedDict(
    'ContestParticipantCountAggregateOutput',
    {
        'id': int,
        'contestId': int,
        'userId': int,
        'rank': int,
        '_all': int,
    },
    total=False,
)


ContestParticipantKeys = Literal[
    'id',
    'contest',
    'contestId',
    'user',
    'userId',
    'rank',
]
ContestParticipantScalarFieldKeys = Literal[
    'id',
    'contestId',
    'userId',
    'rank',
]
ContestParticipantScalarFieldKeysT = TypeVar('ContestParticipantScalarFieldKeysT', bound=ContestParticipantScalarFieldKeys)

ContestParticipantRelationalFieldKeys = Literal[
        'contest',
        'user',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields