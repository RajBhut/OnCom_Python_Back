// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  PYTHON
  C
  CPP
  JAVA
  JAVASCRIPT
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  password           String
  name               String?
  createdAt          DateTime             @default(now())
  problems           Problem[]
  contests           Contest[]
  Submission         Submission[]
  ContestParticipant ContestParticipant[]

  Problem_code Problem_code[]
}

model Problem {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  difficulty     Difficulty
  creator        User             @relation(fields: [creatorId], references: [id])
  creatorId      Int
  submissions    Submission[]
  tags           String[]
  ContestProblem ContestProblem[]
  edgedata       String           @default("")

  nodedata     String         @default("")
  Problem_code Problem_code[]
}

model Problem_code {
  id        Int      @unique @default(autoincrement())
  function  String
  language  Language
  testcases String
  checker   String
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@id([problemId, language])
}

model Submission {
  id        Int      @id @default(autoincrement())
  code      String
  language  Language
  status    String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId Int
  score     Int
  createdAt DateTime @default(now())
}

model Contest {
  id           Int                  @id @default(autoincrement())
  title        String
  description  String
  creator      User                 @relation(fields: [creatorId], references: [id])
  creatorId    Int
  problems     ContestProblem[]
  participants ContestParticipant[]
}

model ContestProblem {
  id        Int     @id @default(autoincrement())
  contest   Contest @relation(fields: [contestId], references: [id])
  contestId Int
  problem   Problem @relation(fields: [problemId], references: [id])
  problemId Int
}

model ContestParticipant {
  id        Int     @id @default(autoincrement())
  contest   Contest @relation(fields: [contestId], references: [id])
  contestId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  rank      Int?
}
